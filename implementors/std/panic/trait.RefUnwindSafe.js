(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl RefUnwindSafe for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; RefUnwindSafe for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; RefUnwindSafe for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; RefUnwindSafe for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl RefUnwindSafe for Prefix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Infix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Suffix","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colour","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A&gt; RefUnwindSafe for Drain&lt;'a, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Send&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Recv&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["async_executor"] = [{"text":"impl RefUnwindSafe for Executor&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl RefUnwindSafe for LocalExecutor&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["async_fs"] = [{"text":"impl !RefUnwindSafe for ReadDir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenOptions","synthetic":true,"types":[]}];
implementors["async_io"] = [{"text":"impl RefUnwindSafe for Timer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_lock"] = [{"text":"impl !RefUnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for MutexGuardArc&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockUpgradableReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SemaphoreGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SemaphoreGuardArc","synthetic":true,"types":[]}];
implementors["async_net"] = [{"text":"impl RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixStream","synthetic":false,"types":[]},{"text":"impl RefUnwindSafe for TcpStream","synthetic":false,"types":[]}];
implementors["async_process"] = [{"text":"impl RefUnwindSafe for Child","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildStdin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildStdout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChildStderr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Command","synthetic":true,"types":[]}];
implementors["async_task"] = [{"text":"impl RefUnwindSafe for Runnable","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Task&lt;T&gt;","synthetic":false,"types":[]}];
implementors["atomic_waker"] = [{"text":"impl !RefUnwindSafe for AtomicWaker","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecodeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharacterSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; RefUnwindSafe for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for BitDomain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for BitDomainMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Domain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for DomainMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BitIdx&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BitTail&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BitPos&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BitSel&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BitMask&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Msb0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Iter&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for IterMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for ChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for ChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for RChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for Split&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for SplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for RSplit&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for RSplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for SplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for SplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for RSplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; RefUnwindSafe for RSplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for BitMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Access: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for IntoIter&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; RefUnwindSafe for Drain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; RefUnwindSafe for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; RefUnwindSafe for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["blocking"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Unblock&lt;T&gt;","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl RefUnwindSafe for BigEndian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bytes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BytesMut","synthetic":true,"types":[]}];
implementors["bzip2"] = [{"text":"impl RefUnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Action","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl RefUnwindSafe for bz_stream","synthetic":true,"types":[]}];
implementors["cesu8"] = [{"text":"impl RefUnwindSafe for Cesu8DecodingError","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl RefUnwindSafe for FixedOffset","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsoWeek","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NaiveTime","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SecondsFormat","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; RefUnwindSafe for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Numeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalNumeric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fixed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RoundingError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weekday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Month","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseMonthError","synthetic":true,"types":[]}];
implementors["clap"] = [{"text":"impl RefUnwindSafe for AppSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !RefUnwindSafe for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArgSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl RefUnwindSafe for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ConcurrentQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl RefUnwindSafe for Hasher","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl RefUnwindSafe for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl RefUnwindSafe for Filter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Target","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WriteStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimestampPrecision","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Formatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Logger","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]}];
implementors["event_listener"] = [{"text":"impl RefUnwindSafe for Event","synthetic":false,"types":[]},{"text":"impl RefUnwindSafe for EventListener","synthetic":false,"types":[]}];
implementors["fastrand"] = [{"text":"impl !RefUnwindSafe for Rng","synthetic":true,"types":[]}];
implementors["fd_lock"] = [{"text":"impl&lt;'fdlock, T&gt; RefUnwindSafe for FdLockGuard&lt;'fdlock, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for FdLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl RefUnwindSafe for FileTime","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl RefUnwindSafe for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for GzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for MultiGzDecoder&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GzBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushCompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushDecompress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl RefUnwindSafe for FnvHasher","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["fs_extra"] = [{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitProcess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CopyOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirOptions","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirContent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitProcess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitProcessResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntryAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DirEntryValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LsResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TransitProcess","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Cancellation&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Canceled","synthetic":true,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollOnce&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YieldNow","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; RefUnwindSafe for Zip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; RefUnwindSafe for TryZip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; RefUnwindSafe for Or&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; RefUnwindSafe for Race&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for BlockOn&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for NextFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for TryNextFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S:&nbsp;?Sized&gt; RefUnwindSafe for CountFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; RefUnwindSafe for CollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; RefUnwindSafe for TryCollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, B&gt; RefUnwindSafe for PartitionFuture&lt;S, P, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, T&gt; RefUnwindSafe for FoldFuture&lt;S, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, F, B&gt; RefUnwindSafe for TryFoldFuture&lt;'a, S, F, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, St, F&gt; RefUnwindSafe for Scan&lt;S, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F&gt; RefUnwindSafe for FlatMap&lt;S, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut&gt; RefUnwindSafe for Then&lt;S, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; RefUnwindSafe for Filter&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Or&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; RefUnwindSafe for Race&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; RefUnwindSafe for TakeWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; RefUnwindSafe for SkipWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for StepBy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; RefUnwindSafe for Chain&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Cloned&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Copied&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Cycle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Enumerate&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for NthFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for LastFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; RefUnwindSafe for FindFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; RefUnwindSafe for FindMapFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; RefUnwindSafe for PositionFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; RefUnwindSafe for AllFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; RefUnwindSafe for AnyFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; RefUnwindSafe for ForEachFuture&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; RefUnwindSafe for TryForEachFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, FromA, FromB&gt; RefUnwindSafe for UnzipFuture&lt;S, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AssertAsync&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for BlockOn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadUntilFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadLineFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadVectoredFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToEndFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToStringFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadExactFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Bytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R1, R2&gt; RefUnwindSafe for Chain&lt;R1, R2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for SeekFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteVectoredFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteAllFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for FlushFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for CloseFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl RefUnwindSafe for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for FutureObj&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["futures_timer"] = [{"text":"impl !RefUnwindSafe for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; RefUnwindSafe for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RemoteHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Remote&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Shared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for WeakShared&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; RefUnwindSafe for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; RefUnwindSafe for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; RefUnwindSafe for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; RefUnwindSafe for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; RefUnwindSafe for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; RefUnwindSafe for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; RefUnwindSafe for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; RefUnwindSafe for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; RefUnwindSafe for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; RefUnwindSafe for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; RefUnwindSafe for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for Abortable&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortRegistration","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for AbortHandle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; RefUnwindSafe for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; RefUnwindSafe for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; RefUnwindSafe for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; RefUnwindSafe for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for BufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for Buffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for ForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; !RefUnwindSafe for SplitStream&lt;S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; !RefUnwindSafe for SplitSink&lt;S, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; !RefUnwindSafe for ReuniteError&lt;T, Item&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; RefUnwindSafe for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; RefUnwindSafe for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; RefUnwindSafe for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; RefUnwindSafe for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; RefUnwindSafe for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; RefUnwindSafe for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBufferUnordered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for TryBuffered&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; !RefUnwindSafe for TryForEachConcurrent&lt;St, Fut, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; RefUnwindSafe for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; RefUnwindSafe for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; RefUnwindSafe for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; RefUnwindSafe for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; RefUnwindSafe for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; RefUnwindSafe for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; RefUnwindSafe for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for FuturesOrdered&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !RefUnwindSafe for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; !RefUnwindSafe for FuturesUnordered&lt;Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; !RefUnwindSafe for SelectAll&lt;St&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; RefUnwindSafe for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Feed&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; RefUnwindSafe for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; RefUnwindSafe for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; RefUnwindSafe for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; RefUnwindSafe for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; RefUnwindSafe for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; RefUnwindSafe for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; RefUnwindSafe for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; RefUnwindSafe for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; RefUnwindSafe for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; RefUnwindSafe for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; RefUnwindSafe for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReuniteError&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; RefUnwindSafe for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexLockFuture&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, U&gt; !RefUnwindSafe for MappedMutexGuard&lt;'a, T, U&gt;","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["glob"] = [{"text":"impl !RefUnwindSafe for Paths","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GlobError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatternError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pattern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MatchOptions","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Reason","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for ReadySendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PushPromise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PushPromises","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&nbsp;=&nbsp;Bytes&gt; !RefUnwindSafe for Handshake&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendPushedResponse&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for SendStream&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowControl","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PingPong","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ping","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pong","synthetic":true,"types":[]}];
implementors["heim_common"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["heim_disk"] = [{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IoCounters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileSystem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Partition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Usage","synthetic":true,"types":[]}];
implementors["heim_runtime"] = [{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl RefUnwindSafe for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; RefUnwindSafe for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;D as BlockInput&gt;::BlockSize as ArrayLength&lt;u8&gt;&gt;::ArrayType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueIterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToStrError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Method","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Response&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Authority","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scheme","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Parts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUri","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Version","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Extensions","synthetic":true,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; RefUnwindSafe for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; RefUnwindSafe for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl RefUnwindSafe for HttpDate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FormattedDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rfc3339Timestamp","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Upgraded","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiResolver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GaiAddrs","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for GaiFuture","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Connected","synthetic":true,"types":[]},{"text":"impl&lt;C, B&nbsp;=&nbsp;Body&gt; !RefUnwindSafe for Client&lt;C, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for SendRequest&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; !RefUnwindSafe for Connection&lt;T, B&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; !RefUnwindSafe for Connect&lt;C, B, T&gt;","synthetic":true,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for HttpsConnector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for MaybeHttpsStream&lt;T&gt;","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl RefUnwindSafe for Idna","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Config","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; RefUnwindSafe for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; RefUnwindSafe for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; RefUnwindSafe for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl RefUnwindSafe for IpAddrRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpNet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Net","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Net","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrefixLenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpSubnets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddrParseError","synthetic":true,"types":[]}];
implementors["isolang"] = [{"text":"impl RefUnwindSafe for Language","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]}];
implementors["j4rs"] = [{"text":"impl RefUnwindSafe for Jvm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JvmBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvocationArg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for InstanceReceiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instance","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClasspathEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for JavaOpt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for J4RsError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalJarArtifact","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MavenArtifact","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MavenSettings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MavenArtifactRepo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxController","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FxEventType","synthetic":true,"types":[]}];
implementors["java_locator"] = [{"text":"impl RefUnwindSafe for JavaLocatorError","synthetic":true,"types":[]}];
implementors["jni_sys"] = [{"text":"impl RefUnwindSafe for _jobject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for jvalue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _jfieldID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for _jmethodID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for jobjectRefType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JNINativeMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JNINativeInterface_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JNIEnv_","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JavaVMOption","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JavaVMInitArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JavaVMAttachArgs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JNIInvokeInterface_","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl RefUnwindSafe for ErrorCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl RefUnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Symbol&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Library","synthetic":true,"types":[]},{"text":"impl&lt;'lib, T&gt; RefUnwindSafe for Symbol&lt;'lib, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;K, V, S&gt; RefUnwindSafe for LinkedHashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; RefUnwindSafe for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetLoggerError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl RefUnwindSafe for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl RefUnwindSafe for MimeGuess","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IterRaw","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl RefUnwindSafe for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompressionLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InflateState","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TINFLStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZFlush","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MZError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poll","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Registry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sender","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Waker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepalive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixStream","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl RefUnwindSafe for Dir","synthetic":true,"types":[]},{"text":"impl&lt;'d&gt; RefUnwindSafe for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Entry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Errno","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlockArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FallocateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MntFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MqAttr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkptyResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PtyMaster","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CloneFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CpuSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioOpcode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LioMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EpollEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MapFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MmapAdvise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Options","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaFmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dqblk","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RebootMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalIterator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SaFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigmaskHow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigHandler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigAction","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SigevNotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SfdFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VsockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddressFamily","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InetAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReuseAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReusePort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Linger","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpAddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpDropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SendTimeout","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Broadcast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OobInline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeepAlive","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PeerCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepCount","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpKeepInterval","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBuf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RcvBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SndBufForce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcceptConn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BindToDevice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OriginalDst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpTransparent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mark","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PassCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpCongestion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockProtocol","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MsgFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnixCredentials","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; RefUnwindSafe for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; RefUnwindSafe for RecvMmsgData&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SockLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shutdown","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FsFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Statvfs","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysInfo","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Termios","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BaudRate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlushArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlowArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ControlFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LocalFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimeVal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IoVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UtsName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WaitStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InitFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Inotify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InotifyEvent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerFd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expiration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClockId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UContext","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Uid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForkResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FchownatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Whence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinkatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SysconfVar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for User","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["nom"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Error&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for VerboseError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VerboseErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Needed","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Err&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G, O1&gt; RefUnwindSafe for Map&lt;F, G, O1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G, O1&gt; RefUnwindSafe for FlatMap&lt;F, G, O1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G, O1&gt; RefUnwindSafe for AndThen&lt;F, G, O1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G&gt; RefUnwindSafe for And&lt;F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, G&gt; RefUnwindSafe for Or&lt;F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F, O1, O2, E1, E2&gt; RefUnwindSafe for Into&lt;F, O1, O2, E1, E2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;E2: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O1: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O2: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompareResult","synthetic":true,"types":[]},{"text":"impl&lt;I, E, F&gt; RefUnwindSafe for ParserIterator&lt;I, E, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Endianness","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; RefUnwindSafe for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl RefUnwindSafe for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseFloatError","synthetic":true,"types":[]}];
implementors["oauth2"] = [{"text":"impl RefUnwindSafe for BasicTokenType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BasicErrorResponseType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmptyExtraDeviceAuthorizationFields","synthetic":true,"types":[]},{"text":"impl&lt;EF&gt; RefUnwindSafe for DeviceAuthorizationResponse&lt;EF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceCodeErrorResponseType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardRevocableToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevocationErrorResponseType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Error&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientId","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RedirectUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntrospectionUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RevocationUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceAuthorizationUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EndUserVerificationUrl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResponseType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceOwnerUsername","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Scope","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PkceCodeChallengeMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PkceCodeVerifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PkceCodeChallenge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientSecret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CsrfToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthorizationCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefreshToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AccessToken","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ResourceOwnerPassword","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeviceCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UserCode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConfigurationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AuthType","synthetic":true,"types":[]},{"text":"impl&lt;TE, TR, TT, TIR, RT, TRE&gt; RefUnwindSafe for Client&lt;TE, TR, TT, TIR, RT, TRE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RT: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TIR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for AuthorizationRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HttpResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; RefUnwindSafe for CodeTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; RefUnwindSafe for RefreshTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; RefUnwindSafe for PasswordTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; RefUnwindSafe for ClientCredentialsTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TIR, TT&gt; RefUnwindSafe for IntrospectionRequest&lt;'a, TE, TIR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TIR: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, RT, TE&gt; RefUnwindSafe for RevocationRequest&lt;'a, RT, TE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RT: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE&gt; RefUnwindSafe for DeviceAuthorizationRequest&lt;'a, TE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, TR, TT, EF&gt; !RefUnwindSafe for DeviceAccessTokenRequest&lt;'a, 'b, TR, TT, EF&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmptyExtraTokenFields","synthetic":true,"types":[]},{"text":"impl&lt;EF, TT&gt; RefUnwindSafe for StandardTokenResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EF, TT&gt; RefUnwindSafe for StandardTokenIntrospectionResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StandardErrorResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RE, T&gt; !RefUnwindSafe for RequestTokenError&lt;RE, T&gt;","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe + UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;RefUnwindSafe + UnwindSafe&gt; RefUnwindSafe for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F:&nbsp;RefUnwindSafe&gt; RefUnwindSafe for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;OnceCell&lt;T&gt;: RefUnwindSafe,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["parking"] = [{"text":"impl !RefUnwindSafe for Parker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Unparker","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl RefUnwindSafe for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for OrderedMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; RefUnwindSafe for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["polling"] = [{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poller","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LexError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Delimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Punct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Spacing","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ident","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl RefUnwindSafe for Bernoulli","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BernoulliError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binomial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Cauchy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dirichlet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp1","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChiSquared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FisherF","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StudentT","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Beta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Normal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LogNormal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pareto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Poisson","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UniformDuration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitCircle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; RefUnwindSafe for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WeightedError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpenClosed01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Open01","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; RefUnwindSafe for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; RefUnwindSafe for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntropyRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StepRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StdRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ThreadRng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; RefUnwindSafe for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl RefUnwindSafe for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; RefUnwindSafe for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OsRng","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RegexSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatches","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; RefUnwindSafe for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; RefUnwindSafe for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !RefUnwindSafe for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; RefUnwindSafe for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; RefUnwindSafe for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithComments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Alternation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Concat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAscii","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBracketed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Assertion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AssertionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetFlags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flags","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Flag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literals","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Printer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Translator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaseFoldError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Hir","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HirKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Literal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Class","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Anchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WordBoundary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GroupKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repetition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionKind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RepetitionRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Parser","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Range","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Utf8Sequences","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Body","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Client","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Form","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Part","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Request","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RequestBuilder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Response","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Proxy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Action","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identity","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl RefUnwindSafe for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SealingKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpeningKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nonce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; RefUnwindSafe for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnboundKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LessSafeKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Digest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unspecified","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyRejected","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Salt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; RefUnwindSafe for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tag","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Key","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Context","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Algorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SystemRandom","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for RsaParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; !RefUnwindSafe for UnparsedPublicKey&lt;B&gt;","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl RefUnwindSafe for FxHasher","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl RefUnwindSafe for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Payload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PayloadU24","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PayloadU16","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PayloadU8","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for u24","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageDeframer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Compression","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ContentType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakeType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlertLevel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlertDescription","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExtensionType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerNameType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedCurve","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CipherSuite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECPointFormat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECCurveType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignatureScheme","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Random","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SessionID","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnknownExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateEntry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECParameters","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertReqExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CertificateStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakePayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessagePayload","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Message","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MessageError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedTrustAnchor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RootCertStore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TLSError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T:&nbsp;?Sized&gt; RefUnwindSafe for Stream&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HandshakeSignatureValid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerCertVerified","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientCertVerified","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WebPKIVerifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoClientAuth","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for DangerousClientConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteEarlyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ClientSession","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PrivateKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Certificate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoKeyLog","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for KeyLogFile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ClientHello&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ServerSession","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ticketer","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CertifiedKey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RSASigningKey","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl RefUnwindSafe for Handle","synthetic":true,"types":[]}];
implementors["schemars"] = [{"text":"impl !RefUnwindSafe for SchemaSettings","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SchemaGenerator","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Schema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RootSchema","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SchemaObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Metadata","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubschemaValidation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NumberValidation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StringValidation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ArrayValidation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ObjectValidation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InstanceType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SingleOrVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReplaceBoolSchemas","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemoveRefSiblings","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetSingleExample","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; RefUnwindSafe for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; RefUnwindSafe for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; RefUnwindSafe for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; RefUnwindSafe for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; RefUnwindSafe for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; RefUnwindSafe for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_derive_internals"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Container&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Variant&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Style","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Name","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenameAllRules","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Container","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TagType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Ctxt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RenameRule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Derive","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; RefUnwindSafe for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; RefUnwindSafe for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CharEscape","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Serializer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; RefUnwindSafe for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !RefUnwindSafe for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !RefUnwindSafe for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]}];
implementors["serde_xml_rs"] = [{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Deserializer&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl&lt;'a&gt; !RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Location","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mapping","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Number","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl RefUnwindSafe for Sha256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha224","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha384","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["shellwords"] = [{"text":"impl RefUnwindSafe for MismatchedQuotes","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;R, E&gt; !RefUnwindSafe for SignalDelivery&lt;R, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Pending&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O&gt; !RefUnwindSafe for PollResult&lt;O&gt;","synthetic":true,"types":[]},{"text":"impl&lt;SD, E&gt; RefUnwindSafe for SignalIterator&lt;SD, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WithRawSiginfo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SignalOnly","synthetic":true,"types":[]},{"text":"impl&lt;E&nbsp;=&nbsp;SignalOnly&gt; !RefUnwindSafe for SignalsInfo&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; !RefUnwindSafe for Forever&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Channel&lt;T&gt;","synthetic":true,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl RefUnwindSafe for SigId","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl RefUnwindSafe for SockAddr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Socket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Domain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Protocol","synthetic":true,"types":[]}];
implementors["strsim"] = [{"text":"impl RefUnwindSafe for StrSimError","synthetic":true,"types":[]}];
implementors["subprocess"] = [{"text":"impl !RefUnwindSafe for Exec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaptureData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NullFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Pipeline","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Communicator","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommunicateError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Popen","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PopenConfig","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Redirection","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PopenError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExitStatus","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl RefUnwindSafe for Underscore","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abstract","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for As","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Async","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Auto","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Await","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Become","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Box","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Break","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Const","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Continue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Crate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Default","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Do","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dyn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Else","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Enum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Extern","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Final","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for For","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for If","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Impl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for In","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Let","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Loop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Match","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Move","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Mut","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Override","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Priv","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ref","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Return","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SelfValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Static","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Struct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Super","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Trait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Try","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Typeof","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Union","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unsized","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Use","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Virtual","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Where","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for While","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Add","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AddEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for And","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndAnd","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AndEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for At","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bang","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Caret","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CaretEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Colon2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Comma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Div","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DivEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dollar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Dot3","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DotDotEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Eq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EqEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ge","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Gt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Le","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MulEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Or","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OrOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Question","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Rem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RemEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FatArrow","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Semi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShlEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Shr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ShrEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Star","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sub","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tilde","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Brace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Bracket","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Paren","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Group","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Attribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AttrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Meta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaList","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaNameValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NestedMeta","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variant","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Fields","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsNamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Visibility","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisPublic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VisRestricted","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Expr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssign","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAsync","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprAwait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBinary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprBreak","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprCast","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprClosure","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprContinue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprField","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprForLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprIndex","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprLoop","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMatch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprRepeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprReturn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnary","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprWhile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExprYield","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Member","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Index","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldValue","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Label","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Arm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RangeLimits","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Generics","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParam","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LifetimeDef","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParamBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WhereClause","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for WherePredicate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PredicateEq","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Item","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemImpl","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMacro2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemMod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ItemUse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseTree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UsePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseName","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseRename","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGlob","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UseGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItem","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemConst","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Signature","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Receiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for File","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lifetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Lit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByteStr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitByte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitChar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitInt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitFloat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LitBool","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StrStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Macro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DeriveInput","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Data","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataEnum","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DataUnion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UnOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Block","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Stmt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Local","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Type","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeArray","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeBareFn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeGroup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeInfer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeNever","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeParen","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypePtr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TypeTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Abi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BareFnArg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Variadic","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ReturnType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Pat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatBox","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatIdent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatLit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatMacro","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatOr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRange","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatReference","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatRest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatSlice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTuple","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PatWild","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FieldPat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Path","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathSegment","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PathArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GenericArgument","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Binding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Constraint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for QSelf","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; RefUnwindSafe for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; RefUnwindSafe for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; RefUnwindSafe for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Nothing","synthetic":true,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;R&gt; !RefUnwindSafe for Archive&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for Entries&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Builder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !RefUnwindSafe for Entry&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Unpacked","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EntryType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Header","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HeaderMode","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OldHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UstarHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuSparseHeader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for GnuExtSparseHeader","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; RefUnwindSafe for PaxExtensions&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; RefUnwindSafe for PaxExtension&lt;'entry&gt;","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl RefUnwindSafe for TempDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PathPersistError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TempPath","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamedTempFile","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PersistError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl RefUnwindSafe for ColorChoice","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BufferWriter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ColorSpec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Color","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseColorError","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl RefUnwindSafe for NoHyphenation","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; RefUnwindSafe for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl RefUnwindSafe for Duration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Timespec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PreciseTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SteadyTime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Tm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tmc_client"] = [{"text":"impl !RefUnwindSafe for ClientError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FeedbackAnswer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for User","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Organization","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Course","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CourseData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CourseDetails","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Exercise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CourseExercise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CourseDataExercise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CourseDataExercisePoint","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExerciseDetails","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExercisesDetails","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Submission","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NewSubmission","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionProcessingStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionFinished","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SubmissionFeedbackResponse","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Review","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UpdateResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ClientUpdateData","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TmcClient","synthetic":true,"types":[]}];
implementors["tmc_langs_csharp"] = [{"text":"impl !RefUnwindSafe for CSharpError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSharpPlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CSharpStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_framework"] = [{"text":"impl !RefUnwindSafe for TmcCommand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Output","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExerciseDesc","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunResult","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RunStatus","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ExercisePackagingConfiguration","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StyleValidationStrategy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StyleValidationError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for StyleValidationResult","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TmcError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for CommandError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FileIo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileLock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for FileLockGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MetaString","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; RefUnwindSafe for MetaSyntaxParser&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NothingIsStudentFilePolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EverythingIsStudentFilePolicy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TmcProjectYml","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for PythonVer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTests","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTestsWrapper","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTestsPoints","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntOrString","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Warning","synthetic":true,"types":[]}];
implementors["tmc_langs_java"] = [{"text":"impl RefUnwindSafe for AntPlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AntStudentFilePolicy","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for JavaError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MavenPlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MavenStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_make"] = [{"text":"impl !RefUnwindSafe for MakeError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MakePlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MakeStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_notests"] = [{"text":"impl RefUnwindSafe for NoTestsPlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoTestsStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_python3"] = [{"text":"impl !RefUnwindSafe for PythonError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Python3Plugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Python3StudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_r"] = [{"text":"impl RefUnwindSafe for RPlugin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_util"] = [{"text":"impl !RefUnwindSafe for UtilError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParamError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ProgressReporter2","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StatusUpdate&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefreshData","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RefreshExercise","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TmcParams","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OutputFormat","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for ReadBuf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for AsyncFd&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for AsyncFdReadyGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for AsyncFdReadyMutGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryIoError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReadHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for WriteHalf&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; RefUnwindSafe for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DuplexStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Repeat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpListener","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TcpSocket","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TcpStream","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UdpSocket","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixDatagram","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ReuniteError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SocketAddr","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnixStream","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for UCred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for JoinError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Handle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for EnterGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Runtime","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Barrier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Permit&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for UnboundedReceiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for OwnedMutexGuard&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryLockError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Notify","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TryAcquireError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AcquireError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Sleep","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Elapsed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Instant","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Timeout&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl&lt;IO&gt; !RefUnwindSafe for TlsStream&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !RefUnwindSafe for TlsStream&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TlsConnector","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !RefUnwindSafe for Connect&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !RefUnwindSafe for Accept&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !RefUnwindSafe for FailableConnect&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; !RefUnwindSafe for FailableAccept&lt;IO&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for TlsStream&lt;T&gt;","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl RefUnwindSafe for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; RefUnwindSafe for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; RefUnwindSafe for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; RefUnwindSafe for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Builder","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LinesCodec","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for LinesCodecError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for CancellationToken","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for WaitForCancellationFuture&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for PollSemaphore","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for ReusableBoxFuture&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; RefUnwindSafe for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; RefUnwindSafe for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Datetime","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Value","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T&gt; !RefUnwindSafe for WithDispatch&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !RefUnwindSafe for Instrumented&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Span","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Entered&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EnteredSpan","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl !RefUnwindSafe for Identifier","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Dispatch","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for DefaultGuard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Field","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Empty","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Kind","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for LevelFilter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseLevelError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Current","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Interest","synthetic":true,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !RefUnwindSafe for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for TypeMap","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl RefUnwindSafe for Level","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BidiClass","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; RefUnwindSafe for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; RefUnwindSafe for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for Replacements&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; RefUnwindSafe for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["uom"] = [{"text":"impl RefUnwindSafe for yottameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for meter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decimeter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micrometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for galileo","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_per_minute_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottamole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettamole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for examole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petamole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teramole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigamole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megamole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decamole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decimole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micromole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctomole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for radian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for revolution","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mil","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for radian_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_per_second_squared","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for radian_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for radian_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for revolution_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for revolution_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for revolution_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_yottameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_zettameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_exameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_petameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_terameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_gigameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_megameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_kilometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_hectometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_decameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_micrometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_nanometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_picometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_femtometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_attometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_zeptometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_yoctometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for acre","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for are","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for barn","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for circular_mil","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectare","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_mile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_yard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_zeptogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_attogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_femtogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_picogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_nanogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_microgram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_milligram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_gram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_megagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_gigagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_teragram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_petagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_exagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_zettagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_yottagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_it_per_gram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_per_gram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decafarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for farad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decifarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centifarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millifarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microfarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctofarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abfarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statfarad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decakatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for katal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decikatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centikatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctokatal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yotta_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zetta_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exa_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for peta_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tera_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for giga_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mega_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilo_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hecto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deca_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deci_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centi_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milli_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micro_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nano_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pico_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for atto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zepto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yocto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for katal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decikatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centikatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokatal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for katal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for katal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikatal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkatal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokatal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokatal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokatal_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for katal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for katal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yotta_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zetta_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exa_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for peta_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tera_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for giga_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mega_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilo_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hecto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deca_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deci_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centi_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milli_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micro_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nano_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pico_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for atto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zepto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yocto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilo_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilo_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milli_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milli_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micro_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micro_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nano_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nano_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pico_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pico_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femto_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femto_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilo_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milli_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micro_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nano_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pico_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femto_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilo_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milli_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micro_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nano_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pico_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femto_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for radian_per_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_per_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for radian_per_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_per_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teracoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decacoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for coulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decicoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centicoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millicoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microcoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctocoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microampere_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abcoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for faraday","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for franklin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statcoulomb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctoampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gilbert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statampere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teravolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decavolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for volt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decivolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centivolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millivolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctovolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decasiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for siemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mho","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decisiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centisiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millisiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microsiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctosiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abmho","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for absiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statsiemens","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statmho","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctoohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for statohm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctojoule","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petawatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terawatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigawatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megawatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectowatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decawatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microwatt_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaelectronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for electronvolt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_39","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_59","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_60","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_it","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_15","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_20","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_it_nutrition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_nutrition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for erg","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_poundal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocalorie_it","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocalorie","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for quad","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for therm_ec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for therm_us","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_tnt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottanewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettanewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exanewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petanewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teranewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for giganewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for meganewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decanewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decinewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centinewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millinewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micronewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for piconewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctonewton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dyne","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_force","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kip","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_force","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for poundal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_force","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_force","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decahertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decihertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centihertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millihertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microhertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctohertz","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cycle_per_day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cycle_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cycle_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cycle_per_shake","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cycle_per_year","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_second_cubed_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_square_kilometer_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_square_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_square_centimeter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_square_millimeter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_second_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_second_square_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_hour_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_hour_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_minute_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_minute_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_second_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_second_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_hour_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_hour_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_minute_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_minute_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_second_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_second_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decahenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for henry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decihenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centihenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millihenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microhenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctohenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for abhenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stathenry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yobibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zebibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exbibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pebibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tebibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gibibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mebibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megabit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kibibit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilobit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yobibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zebibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exbibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pebibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tebibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gibibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mebibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megabyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kibibyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilobyte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for byte","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for octet","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nibble","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for crumb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for shannon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for natural_unit_of_information","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for trit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hartley","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciban","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yobibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zebibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exbibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pebibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tebibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gibibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mebibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megabit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kibibit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilobit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bit_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yobibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zebibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exbibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pebibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tebibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gibibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mebibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megabyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kibibyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilobyte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for byte_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for octet_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for meter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decimeter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micrometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_per_second_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilometer_per_minute_cubed","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micrometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for angstrom","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for astronomical_unit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for chain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fathom","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fermi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_survey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for light_year","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microinch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micron","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mil","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mile_survey","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nautical_mile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for parsec","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pica_computer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pica_printers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_computer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for point_printers","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for rod","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teracandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decicandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centicandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millicandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microcandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_picometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_nanometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_micrometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_kilometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_megameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_gigameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_terameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela_per_square_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for footlambert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for lambert","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stilb","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teracandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decacandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for candela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decicandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centicandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millicandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microcandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctocandela","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for weber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctoweber","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for maxwell","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teratesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decatesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decitesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centitesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millitesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microtesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctotesla","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gamma","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gauss","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for carat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grain","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hundredweight_long","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hundredweight_short","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_troy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pennyweight","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_troy","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for slug","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_assay","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_long","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_short","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for carat_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grain_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hundredweight_long_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hundredweight_short_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_troy_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pennyweight_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_troy_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for slug_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_assay_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_long_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_short_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grain_per_gallon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_cubic_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_per_cubic_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_per_gallon_imperial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_per_gallon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_cubic_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_cubic_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_cubic_yard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_gallon_imperial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_gallon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for slug_per_cubic_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_long_per_cubic_yard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_short_per_cubic_yard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for carat_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for grain_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hundredweight_long_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hundredweight_short_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_troy_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pennyweight_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_per_day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_troy_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for slug_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_assay_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_long_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_short_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_short_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for examole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teramole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decimole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micromole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilomole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micromole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micromole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanomole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picomole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtomole_per_liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micromole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micromole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_square_meter_per_second_squared_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctojoule_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectowatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microwatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_39_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_59_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_60_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_it_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_15_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_20_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_it_nutrition_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for calorie_nutrition_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for electronvolt_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for erg_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_poundal_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_pound_force_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocalorie_it_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilocalorie_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for quad_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for therm_ec_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for therm_us_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_tnt_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_second_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_per_mole","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_yottameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_zettameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_exameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_petameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_terameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_gigameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_megameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_kilometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_hectometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_decameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_decimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_centimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_millimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_micrometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_nanometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_picometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_femtometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_attometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_zeptometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_yoctometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ton_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_meter_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_meter_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_meter_per_day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for slug_foot_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for slug_inch_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_foot_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_inch_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decawatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciwatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiwatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microwatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctowatt","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for erg_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_pound_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_pound_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_pound_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for horsepower","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for horsepower_boiler","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for horsepower_electric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for horsepower_metric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for horsepower_imperial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hydraulic_horsepower","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decapascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decipascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centipascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millipascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micropascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctopascal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for atmosphere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for atmosphere_technical","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_of_mercury_0","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_of_mercury","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_of_water_4","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_of_water","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dyne_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_of_mercury","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_of_water_39_2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_of_water","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_force_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_of_mercury_32","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_of_mercury_60","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_of_mercury","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_of_water_39_2","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_of_water_60","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_of_water","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_force_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_force_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_force_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kip_per_square_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millibar","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_of_mercury","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_of_water","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millitorr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for poundal_per_square_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_force_per_square_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_force_per_square_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for psi","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for torr","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ratio","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_hundred","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for percent","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_thousand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for per_mille","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_ten_thousand","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for basis_point","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_million","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_billion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_trillion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for part_per_quadrillion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_kilometer_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_centimeter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_millimeter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_micrometer_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_kilogram_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_gram_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_kilogram_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_gram_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_kilogram_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_gram_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_ounce_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_ounce_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_pound_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_pound_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_per_ton_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for btu_it_per_ton_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for steradian","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for spat","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_degree","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for square_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigajoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megajoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilojoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectojoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decajoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for joule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decijoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centijoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millijoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microjoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanojoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decikelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centikelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_rankine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teragram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decigram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centigram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milligram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microgram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_meter_per_second_cubed_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilowatt_per_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for watt_per_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliwatt_per_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decakelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decikelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centikelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millikelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microkelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctokelvin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_celsius","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for degree_rankine","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decasecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decisecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centisecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millisecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microsecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctosecond","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for second_sidereal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for day_sidereal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hour_sidereal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for shake","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for year","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for year_sidereal","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for year_tropical","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottanewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettanewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exanewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petanewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teranewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for giganewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for meganewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decanewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decinewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centinewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millinewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micronewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for piconewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctonewton_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_yottameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_zettameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_exameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_petameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_terameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_gigameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_megameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_kilometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_hectometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_decameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_micrometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_nanometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_picometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_femtometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_attometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_zeptometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for newton_yoctometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dyne_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for dyne_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilogram_force_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ounce_force_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_force_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pound_force_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for terameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for micrometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for foot_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for inch_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kilometer_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for knot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mile_per_hour","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mile_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for mile_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for millimeter_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yottameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_zettameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_exameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_petameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_terameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_gigameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_megameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_kilometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_hectometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_decameter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_meter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_decimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_centimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_millimeter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_micrometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_nanometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_picometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_femtometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_attometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_zeptometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yoctometer","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for acre_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for barrel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bushel","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cord","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_foot","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_inch","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_mile","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yard","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cup","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fluid_ounce","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fluid_ounce_imperial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gallon_imperial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gallon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gill_imperial","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gill","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for liter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctoliter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for peck","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pint_dry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pint_liquid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for quart_dry","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for quart_liquid","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stere","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tablespoon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teaspoon","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for register_ton","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yottameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_zettameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_exameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_petameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_terameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_gigameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_megameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_kilometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_hectometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_decameter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_meter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_decimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_centimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_millimeter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_micrometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_nanometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_picometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_femtometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_attometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_zeptometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yoctometer_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yottaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zettaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for exaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for petaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teraliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gigaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for megaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for kiloliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for hectoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for decaliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for liter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for deciliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for centiliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for milliliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for microliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for nanoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for picoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for femtoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for attoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for zeptoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for yoctoliter_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for acre_foot_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for barrel_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for bushel_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cord_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_foot_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_foot_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_inch_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_inch_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_mile_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yard_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cubic_yard_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for cup_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fluid_ounce_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for fluid_ounce_imperial_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gallon_imperial_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gallon_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gallon_per_minute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gallon_per_day","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gill_imperial_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for gill_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for peck_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pint_dry_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for pint_liquid_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for quart_dry_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for quart_liquid_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for stere_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for tablespoon_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for teaspoon_per_second","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for register_ton_per_second","synthetic":true,"types":[]},{"text":"impl&lt;D:&nbsp;?Sized, N&gt; RefUnwindSafe for Arguments&lt;D, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D:&nbsp;?Sized, U:&nbsp;?Sized, V, N&gt; RefUnwindSafe for QuantityArguments&lt;D, U, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D:&nbsp;?Sized, U:&nbsp;?Sized, V&gt; RefUnwindSafe for Quantity&lt;D, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DisplayStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseQuantityError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ConstantOp","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; RefUnwindSafe for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Origin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParseError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Position","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_arena"] = [{"text":"impl&lt;T&gt; RefUnwindSafe for Arena&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; RefUnwindSafe for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; RefUnwindSafe for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; RefUnwindSafe for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl RefUnwindSafe for DirEntry","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for WalkDir","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; RefUnwindSafe for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl !RefUnwindSafe for Giver","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Taker","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SharedGiver","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Closed","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DNSName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["xattr"] = [{"text":"impl RefUnwindSafe for UnsupportedPlatformError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XAttrs","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; RefUnwindSafe for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; RefUnwindSafe for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TextPosition","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlVersion","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Namespace","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ParserConfig","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for XmlEvent","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ErrorKind","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for EventReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; !RefUnwindSafe for Events&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for EmitterError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl RefUnwindSafe for EmitError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for YamlEmitter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Parser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TEncoding","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TScalarStyle","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Marker","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ScanError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TokenType","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Token","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for Scanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Yaml","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YamlLoader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for YamlIter","synthetic":true,"types":[]}];
implementors["zip"] = [{"text":"impl RefUnwindSafe for CompressionMethod","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for ZipArchive&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !RefUnwindSafe for ZipFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for InvalidPassword","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for ZipError","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DateTime","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for ZipWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for FileOptions","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl RefUnwindSafe for Compressor","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for Decoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; RefUnwindSafe for Encoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for Encoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; RefUnwindSafe for Decoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !RefUnwindSafe for AutoFinishEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; RefUnwindSafe for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; RefUnwindSafe for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for NoOp","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Status","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for Encoder&lt;'a&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()