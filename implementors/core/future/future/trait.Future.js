(function() {var implementors = {};
implementors["async_io"] = [{"text":"impl Future for Timer","synthetic":false,"types":[]}];
implementors["async_task"] = [{"text":"impl&lt;R, T&gt; Future for JoinHandle&lt;R, T&gt;","synthetic":false,"types":[]}];
implementors["event_listener"] = [{"text":"impl Future for EventListener","synthetic":false,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T, '_&gt; Future for Cancellation&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T&gt; Future for Pending&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Future for PollOnce&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F&gt; Future for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(&amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Ready&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Future for YieldNow","synthetic":false,"types":[]},{"text":"impl&lt;F1, F2&gt; Future for Join&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Future,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Future,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T1, T2, E, F1, F2&gt; Future for TryJoin&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Future&lt;Output = Result&lt;T1, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Future&lt;Output = Result&lt;T2, E&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F1, F2&gt; Future for Race&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Future&lt;Output = T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Future&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, F1, F2&gt; Future for Or&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Future&lt;Output = T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Future&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Stream + Unpin + ?Sized, '_&gt; Future for NextFuture&lt;'_, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Stream + ?Sized&gt; Future for CountFuture&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, C&gt; Future for CollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Default + Extend&lt;S::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, E, S, C&gt; Future for TryCollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream&lt;Item = Result&lt;T, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Default + Extend&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, F, T&gt; Future for FoldFuture&lt;S, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream + Sized,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(T, S::Item) -&gt; T,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, E, S, F, B&gt; Future for TryFoldFuture&lt;'a, S, F, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Stream + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Item: Result&lt;Ok = T, Err = E&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: FnMut(B, T) -&gt; Result&lt;B, E&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncBufRead + Unpin + ?Sized, '_&gt; Future for ReadUntilFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncBufRead + Unpin + ?Sized, '_&gt; Future for ReadLineFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + Unpin + ?Sized, '_&gt; Future for ReadFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + Unpin + ?Sized, '_&gt; Future for ReadVectoredFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + Unpin + ?Sized, '_&gt; Future for ReadToEndFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + Unpin + ?Sized, '_&gt; Future for ReadToStringFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;AsyncRead + Unpin + ?Sized, '_&gt; Future for ReadExactFuture&lt;'_, R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;AsyncSeek + Unpin + ?Sized, '_&gt; Future for SeekFuture&lt;'_, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + Unpin + ?Sized, '_&gt; Future for WriteFuture&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + Unpin + ?Sized, '_&gt; Future for WriteVectoredFuture&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + Unpin + ?Sized, '_&gt; Future for WriteAllFuture&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + Unpin + ?Sized, '_&gt; Future for FlushFuture&lt;'_, W&gt;","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;AsyncWrite + Unpin + ?Sized, '_&gt; Future for CloseFuture&lt;'_, W&gt;","synthetic":false,"types":[]}];
implementors["futures_task"] = [{"text":"impl&lt;T, '_&gt; Future for LocalFutureObj&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, '_&gt; Future for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Future for Delay","synthetic":false,"types":[]}];
implementors["h2"] = [{"text":"impl&lt;B&gt; Future for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for PushedResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;T, B:&nbsp;Buf&gt; Future for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Buf + 'static,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;Body + Unpin + ?Sized&gt; Future for Data&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Body + Unpin + ?Sized&gt; Future for Trailers&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["hyper"] = [{"text":"impl&lt;T, B&gt; Future for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Data: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl Future for GaiFuture","synthetic":false,"types":[]},{"text":"impl Future for ResponseFuture","synthetic":false,"types":[]},{"text":"impl&lt;I, B, S, E&gt; Future for Connection&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + Unpin + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, F, S, FE, E, B&gt; Future for Connecting&lt;I, F, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: AsyncRead + AsyncWrite + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Future&lt;Output = Result&lt;S, FE&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: HttpService&lt;Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;S::Future, B&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I, IO, IE, S, B, E&gt; Future for Server&lt;I, S, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Accept&lt;Conn = IO, Error = IE&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;IE: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: AsyncRead + AsyncWrite + Unpin + Send + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: MakeServiceRef&lt;IO, Body, ResBody = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: HttpBody + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;B::Error: Into&lt;Box&lt;dyn StdError + Send + Sync&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: H2Exec&lt;&lt;S::Service as HttpService&lt;Body&gt;&gt;::Future, B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: NewSvcExec&lt;IO, S::Future, S::Service, E, NoopWatcher&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Future for OnUpgrade","synthetic":false,"types":[]}];
implementors["smol"] = [{"text":"impl&lt;T&gt; Future for Task&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Future for Timer","synthetic":false,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;S:&nbsp;?Sized, '_&gt; Future for Seek&lt;'_, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: AsyncSeek + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized, W:&nbsp;?Sized, '_&gt; Future for Copy&lt;'_, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AsyncRead + Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: AsyncWrite + Unpin,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Future for Delay","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Future for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Future,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; Future for Connect&lt;IO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; Future for Accept&lt;IO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; Future for FailableConnect&lt;IO&gt;","synthetic":false,"types":[]},{"text":"impl&lt;IO:&nbsp;AsyncRead + AsyncWrite + Unpin&gt; Future for FailableAccept&lt;IO&gt;","synthetic":false,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T:&nbsp;Future&gt; Future for Instrumented&lt;T&gt;","synthetic":false,"types":[]}];
implementors["tracing_futures"] = [{"text":"impl&lt;T:&nbsp;Future&gt; Future for Instrumented&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()