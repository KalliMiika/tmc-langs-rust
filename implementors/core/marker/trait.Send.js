(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl Send for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Send for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Send for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Send for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for MatchKind","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Searcher","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Send for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Send for Match","synthetic":true,"types":[]}];
implementors["ansi_term"] = [{"text":"impl Send for Prefix","synthetic":true,"types":[]},{"text":"impl Send for Infix","synthetic":true,"types":[]},{"text":"impl Send for Suffix","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for Colour","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericString&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for ANSIGenericStrings&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as ToOwned&gt;::Owned: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["arrayvec"] = [{"text":"impl&lt;A&gt; Send for ArrayString&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CapacityError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Index: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, A:&nbsp;Array + Send&gt; Send for Drain&lt;'a, A&gt;","synthetic":false,"types":[]}];
implementors["async_channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Send&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Recv&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_executor"] = [{"text":"impl&lt;'a&gt; !Send for LocalExecutor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Executor&lt;'_&gt;","synthetic":false,"types":[]}];
implementors["async_fs"] = [{"text":"impl Send for ReadDir","synthetic":true,"types":[]},{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for DirBuilder","synthetic":true,"types":[]},{"text":"impl Send for File","synthetic":true,"types":[]},{"text":"impl Send for OpenOptions","synthetic":true,"types":[]}];
implementors["async_io"] = [{"text":"impl Send for Timer","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Async&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["async_lock"] = [{"text":"impl Send for Barrier","synthetic":true,"types":[]},{"text":"impl Send for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl Send for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SemaphoreGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SemaphoreGuardArc","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for MutexGuardArc&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Sync + ?Sized&gt; Send for RwLockReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + Sync + ?Sized&gt; Send for RwLockUpgradableReadGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send + ?Sized&gt; Send for RwLockWriteGuard&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["async_net"] = [{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]}];
implementors["async_process"] = [{"text":"impl Send for Child","synthetic":true,"types":[]},{"text":"impl Send for ChildStdin","synthetic":true,"types":[]},{"text":"impl Send for ChildStdout","synthetic":true,"types":[]},{"text":"impl Send for ChildStderr","synthetic":true,"types":[]},{"text":"impl Send for Command","synthetic":true,"types":[]}];
implementors["async_task"] = [{"text":"impl Send for Runnable","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Task&lt;T&gt;","synthetic":false,"types":[]}];
implementors["atomic_waker"] = [{"text":"impl Send for AtomicWaker","synthetic":false,"types":[]}];
implementors["atty"] = [{"text":"impl Send for Stream","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl&lt;'a&gt; Send for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for DecoderReader&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for EncoderWriter&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]},{"text":"impl Send for CharacterSet","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]}];
implementors["bitvec"] = [{"text":"impl&lt;O, V&gt; Send for BitArray&lt;O, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for BitDomain&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: BitStore + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Mem as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for BitDomainMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: BitStore + Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Mem as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Domain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for DomainMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Mem: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitIdx&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitTail&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitPos&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitSel&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BitMask&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl Send for Msb0","synthetic":true,"types":[]},{"text":"impl Send for Lsb0","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Windows&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for Chunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for ChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunks&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExact&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; Send for RChunksExactMut&lt;'a, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for Split&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplit&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for SplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitN&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Threadsafe: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, P&gt; Send for RSplitNMut&lt;'a, O, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as BitStore&gt;::Alias: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;T as BitStore&gt;::Alias as BitStore&gt;::Threadsafe: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T&gt; !Send for BitMut&lt;'a, O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for IntoIter&lt;O, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, O, T, I&gt; Send for Splice&lt;'a, O, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O, T&gt; Send for Iter&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for IterMut&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitSlice&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Threadsafe: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitBox&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for Drain&lt;'_, O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;O, T&gt; Send for BitVec&lt;O, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: BitOrder,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: BitStore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["block_buffer"] = [{"text":"impl&lt;BlockSize&gt; Send for BlockBuffer&lt;BlockSize&gt;","synthetic":true,"types":[]}];
implementors["blocking"] = [{"text":"impl&lt;T&gt; Send for Unblock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Send for BigEndian","synthetic":true,"types":[]},{"text":"impl Send for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UninitSlice","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Bytes","synthetic":false,"types":[]},{"text":"impl Send for BytesMut","synthetic":false,"types":[]}];
implementors["bzip2"] = [{"text":"impl Send for Compress","synthetic":true,"types":[]},{"text":"impl Send for Decompress","synthetic":true,"types":[]},{"text":"impl Send for Action","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]}];
implementors["bzip2_sys"] = [{"text":"impl !Send for bz_stream","synthetic":true,"types":[]}];
implementors["cache_padded"] = [{"text":"impl&lt;T&gt; Send for CachePadded&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["cesu8"] = [{"text":"impl Send for Cesu8DecodingError","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Send for FixedOffset","synthetic":true,"types":[]},{"text":"impl Send for Local","synthetic":true,"types":[]},{"text":"impl Send for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NaiveDate","synthetic":true,"types":[]},{"text":"impl Send for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Send for IsoWeek","synthetic":true,"types":[]},{"text":"impl Send for NaiveTime","synthetic":true,"types":[]},{"text":"impl Send for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Send for Parsed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Pad","synthetic":true,"types":[]},{"text":"impl Send for Numeric","synthetic":true,"types":[]},{"text":"impl Send for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Send for Fixed","synthetic":true,"types":[]},{"text":"impl Send for InternalFixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RoundingError","synthetic":true,"types":[]},{"text":"impl Send for Weekday","synthetic":true,"types":[]},{"text":"impl Send for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Send for Month","synthetic":true,"types":[]},{"text":"impl Send for ParseMonthError","synthetic":true,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Send for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["clap"] = [{"text":"impl Send for AppSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for App&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; !Send for Arg&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgMatches&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OsValues&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ArgGroup&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ArgSettings","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SubCommand&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Shell","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["concurrent_queue"] = [{"text":"impl Send for PopError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for PushError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ConcurrentQueue&lt;T&gt;","synthetic":false,"types":[]}];
implementors["cpuid_bool"] = [{"text":"impl Send for LazyBool","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Send for Hasher","synthetic":true,"types":[]}];
implementors["crypto_mac"] = [{"text":"impl Send for MacError","synthetic":true,"types":[]},{"text":"impl Send for InvalidKeyLength","synthetic":true,"types":[]},{"text":"impl&lt;M&gt; Send for Output&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;M as Mac&gt;::OutputSize: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["digest"] = [{"text":"impl Send for InvalidOutputSize","synthetic":true,"types":[]}];
implementors["encoding_rs"] = [{"text":"impl Send for Latin1Bidi","synthetic":true,"types":[]},{"text":"impl Send for Encoding","synthetic":true,"types":[]},{"text":"impl Send for CoderResult","synthetic":true,"types":[]},{"text":"impl Send for DecoderResult","synthetic":true,"types":[]},{"text":"impl Send for Decoder","synthetic":true,"types":[]},{"text":"impl Send for EncoderResult","synthetic":true,"types":[]},{"text":"impl Send for Encoder","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl Send for Filter","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl !Send for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for StyledValue&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for Target","synthetic":true,"types":[]},{"text":"impl Send for WriteStyle","synthetic":true,"types":[]},{"text":"impl Send for TimestampPrecision","synthetic":true,"types":[]},{"text":"impl !Send for Formatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Logger","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]}];
implementors["event_listener"] = [{"text":"impl Send for Event","synthetic":false,"types":[]},{"text":"impl Send for EventListener","synthetic":false,"types":[]}];
implementors["fastrand"] = [{"text":"impl Send for Rng","synthetic":true,"types":[]}];
implementors["fd_lock"] = [{"text":"impl&lt;'fdlock, T&gt; Send for FdLockGuard&lt;'fdlock, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FdLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["filetime"] = [{"text":"impl Send for FileTime","synthetic":true,"types":[]}];
implementors["flate2"] = [{"text":"impl Send for Crc","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for CrcReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for CrcWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for DeflateDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for GzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for MultiGzDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for GzDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for GzHeader","synthetic":true,"types":[]},{"text":"impl Send for GzBuilder","synthetic":true,"types":[]},{"text":"impl Send for Compress","synthetic":true,"types":[]},{"text":"impl Send for Decompress","synthetic":true,"types":[]},{"text":"impl Send for FlushCompress","synthetic":true,"types":[]},{"text":"impl Send for FlushDecompress","synthetic":true,"types":[]},{"text":"impl Send for DecompressError","synthetic":true,"types":[]},{"text":"impl Send for CompressError","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibEncoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZlibDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZlibDecoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Send for FnvHasher","synthetic":true,"types":[]}];
implementors["form_urlencoded"] = [{"text":"impl&lt;'a&gt; Send for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Serializer&lt;'a, T&gt;","synthetic":true,"types":[]}];
implementors["fs_extra"] = [{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for CopyOptions","synthetic":true,"types":[]},{"text":"impl Send for TransitProcess","synthetic":true,"types":[]},{"text":"impl Send for CopyOptions","synthetic":true,"types":[]},{"text":"impl Send for DirOptions","synthetic":true,"types":[]},{"text":"impl Send for DirContent","synthetic":true,"types":[]},{"text":"impl Send for TransitProcess","synthetic":true,"types":[]},{"text":"impl Send for TransitState","synthetic":true,"types":[]},{"text":"impl Send for TransitProcessResult","synthetic":true,"types":[]},{"text":"impl Send for DirEntryAttr","synthetic":true,"types":[]},{"text":"impl Send for DirEntryValue","synthetic":true,"types":[]},{"text":"impl Send for LsResult","synthetic":true,"types":[]},{"text":"impl Send for TransitProcess","synthetic":true,"types":[]}];
implementors["futures_channel"] = [{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SendError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Cancellation&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Canceled","synthetic":true,"types":[]}];
implementors["futures_lite"] = [{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollOnce&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for YieldNow","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for Zip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for TryZip&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for Or&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F1, F2&gt; Send for Race&lt;F1, F2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for CatchUnwind&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for BlockOn&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Once&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for NextFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for TryNextFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S:&nbsp;?Sized&gt; Send for CountFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Send for CollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, C&gt; Send for TryCollectFuture&lt;S, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P, B&gt; Send for PartitionFuture&lt;S, P, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, T&gt; Send for FoldFuture&lt;S, F, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S, F, B&gt; Send for TryFoldFuture&lt;'a, S, F, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, St, F&gt; Send for Scan&lt;S, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Fuse&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Map&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U, F&gt; Send for FlatMap&lt;S, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Flatten&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F, Fut&gt; Send for Then&lt;S, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for Filter&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Or&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S1, S2&gt; Send for Race&lt;S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for FilterMap&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Take&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for TakeWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Skip&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, P&gt; Send for SkipWhile&lt;S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for StepBy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, U&gt; Send for Chain&lt;S, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Cloned&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Copied&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Cycle&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Enumerate&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for Inspect&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for NthFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for LastFuture&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;S as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for FindFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; Send for FindMapFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for PositionFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for AllFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, P&gt; Send for AnyFuture&lt;'a, S, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, F&gt; Send for ForEachFuture&lt;S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, F&gt; Send for TryForEachFuture&lt;'a, S, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Zip&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, FromA, FromB&gt; Send for UnzipFuture&lt;S, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AssertAsync&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for BlockOn&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadUntilFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadLineFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadVectoredFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToEndFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToStringFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadExactFuture&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Bytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R1, R2&gt; Send for Chain&lt;R1, R2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for SeekFuture&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteVectoredFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteAllFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for FlushFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for CloseFuture&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["futures_task"] = [{"text":"impl Send for SpawnError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WakerRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for LocalFutureObj&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FutureObj&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["futures_timer"] = [{"text":"impl Send for Delay","synthetic":true,"types":[]}];
implementors["futures_util"] = [{"text":"impl&lt;Fut&gt; Send for Fuse&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for CatchUnwind&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RemoteHandle&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Remote&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Shared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for WeakShared&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Flatten&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for FlattenStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Map&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for IntoStream&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, T&gt; Send for MapInto&lt;Fut, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for Then&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for Inspect&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for NeverError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for UnitError&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for IntoFuture&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryFlatten&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryFlattenStream&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, Si&gt; Send for FlattenSink&lt;Fut, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for AndThen&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, F&gt; Send for OrElse&lt;Fut1, Fut2, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for ErrInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, E&gt; Send for OkInto&lt;Fut, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for InspectErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapOk&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for MapErr&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F, G&gt; Send for MapOkOrElse&lt;Fut, F, G&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut, F&gt; Send for UnwrapOrElse&lt;Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for Lazy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for MaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for TryMaybeDone&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for OptionFuture&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Ready&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for Join&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for Join3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for Join4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for Join5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as Future&gt;::Output: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for JoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Select&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectAll&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2&gt; Send for TryJoin&lt;Fut1, Fut2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3&gt; Send for TryJoin3&lt;Fut1, Fut2, Fut3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4&gt; Send for TryJoin4&lt;Fut1, Fut2, Fut3, Fut4&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; Send for TryJoin5&lt;Fut1, Fut2, Fut3, Fut4, Fut5&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut4: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut5: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut1 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut2 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut3 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut4 as TryFuture&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut5 as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for TryJoinAll&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;F as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for TrySelect&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for SelectOk&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Send for Either&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Abortable&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for AbortRegistration","synthetic":true,"types":[]},{"text":"impl Send for AbortHandle","synthetic":true,"types":[]},{"text":"impl Send for Aborted","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Chain&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for Collect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, FromA, FromB&gt; Send for Unzip&lt;St, FromA, FromB&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FromA: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;FromB: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Concat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Cycle&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Enumerate&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Filter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for FilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for Fold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Fuse&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for StreamFuture&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Map&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for Next&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for SelectNextSome&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Peekable&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St&gt; Send for Peek&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Skip&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for SkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Take&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut&gt; Send for TakeUntil&lt;St, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Fut as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for Then&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Zip&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St1 as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St2 as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Chunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for ReadyChunks&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, S, Fut, F&gt; Send for Scan&lt;St, S, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for BufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Buffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as Stream&gt;::Item as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for ForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for SplitStream&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, Item&gt; Send for SplitSink&lt;S, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, Item&gt; Send for ReuniteError&lt;T, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for CatchUnwind&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for Flatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as Stream&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Si&gt; Send for Forward&lt;St, Si&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for Inspect&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, U, F&gt; Send for FlatMap&lt;St, U, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for AndThen&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoStream&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for OrElse&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, St:&nbsp;?Sized&gt; Send for TryNext&lt;'a, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEach&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilter&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryFilterMap&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryFlatten&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, C&gt; Send for TryCollect&lt;St, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryConcat&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, T, F&gt; Send for TryFold&lt;St, Fut, T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for TryUnfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TrySkipWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryTakeWhile&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBufferUnordered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for TryBuffered&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;St as TryStream&gt;::Ok as TryFuture&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, Fut, F&gt; Send for TryForEachConcurrent&lt;St, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for IntoAsyncRead&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, E&gt; Send for ErrInto&lt;St, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for InspectErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapOk&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Send for MapErr&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Iter&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Repeat&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for RepeatWith&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Empty&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut&gt; Send for Once&lt;Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Pending&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Send for PollFn&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St1, St2&gt; Send for Select&lt;St1, St2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, Fut&gt; Send for Unfold&lt;T, F, Fut&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FuturesOrdered&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Future&gt;::Output: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterMut&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for IterPinRef&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, Fut&gt; !Send for Iter&lt;'a, Fut&gt;","synthetic":true,"types":[]},{"text":"impl&lt;St&gt; Send for SelectAll&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Close&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Drain&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si1, Si2&gt; Send for Fanout&lt;Si1, Si2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si1: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si2: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Feed&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Flush&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, E&gt; Send for SinkErrInto&lt;Si, Item, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, F&gt; Send for SinkMapErr&lt;Si, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, Item&gt; Send for Send&lt;'a, Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, Si:&nbsp;?Sized, St:&nbsp;?Sized&gt; Send for SendAll&lt;'a, Si, St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;St as TryStream&gt;::Ok: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F, R&gt; Send for Unfold&lt;T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, Fut, F&gt; Send for With&lt;Si, Item, U, Fut, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item, U, St, F&gt; Send for WithFlatMap&lt;Si, Item, U, St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Si, Item&gt; Send for Buffer&lt;Si, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Si: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AllowStdIo&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Close&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for Copy&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, W:&nbsp;?Sized&gt; Send for CopyBuf&lt;'a, R, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for FillBuf&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Flush&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, Item&gt; Send for IntoSink&lt;W, Item&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Item: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for Read&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadVectored&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadExact&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadLine&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToEnd&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadToString&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReadUntil&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized&gt; Send for Seek&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReadHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for WriteHalf&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ReuniteError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Window&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for Write&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteVectored&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W:&nbsp;?Sized&gt; Send for WriteAll&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Fut:&nbsp;Send&gt; Send for FuturesUnordered&lt;Fut&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for MutexLockFuture&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for MutexGuard&lt;'_, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send, U:&nbsp;?Sized + Send&gt; Send for MappedMutexGuard&lt;'_, T, U&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T, N&gt; Send for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send, N:&nbsp;ArrayLength&lt;T&gt;&gt; Send for GenericArray&lt;T, N&gt;","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["glob"] = [{"text":"impl Send for Paths","synthetic":true,"types":[]},{"text":"impl Send for GlobError","synthetic":true,"types":[]},{"text":"impl Send for PatternError","synthetic":true,"types":[]},{"text":"impl Send for Pattern","synthetic":true,"types":[]},{"text":"impl Send for MatchOptions","synthetic":true,"types":[]}];
implementors["h2"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Reason","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for ReadySendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushedResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for PushPromise","synthetic":true,"types":[]},{"text":"impl Send for PushPromises","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Handshake&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendPushedResponse&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendStream&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StreamId","synthetic":true,"types":[]},{"text":"impl Send for RecvStream","synthetic":true,"types":[]},{"text":"impl Send for FlowControl","synthetic":true,"types":[]},{"text":"impl Send for PingPong","synthetic":true,"types":[]},{"text":"impl Send for Ping","synthetic":true,"types":[]},{"text":"impl Send for Pong","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;T&gt; Send for RawIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for RawIterHash&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Send for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilderMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawVacantEntryMut&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for RawEntryBuilder&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Iter&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Send for IntoIter&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Send for Drain&lt;'a, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Send for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for SymmetricDifference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Bucket&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawTable&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawIntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for RawDrain&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send&gt; Send for IterMut&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for RawOccupiedEntryMut&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for OccupiedEntry&lt;'_, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["heim_common"] = [{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["heim_disk"] = [{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for IoCounters","synthetic":true,"types":[]},{"text":"impl Send for FileSystem","synthetic":true,"types":[]},{"text":"impl Send for Partition","synthetic":true,"types":[]},{"text":"impl Send for Usage","synthetic":true,"types":[]}];
implementors["heim_runtime"] = [{"text":"impl Send for Interval","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Send for FromHexError","synthetic":true,"types":[]}];
implementors["hmac"] = [{"text":"impl&lt;D&gt; Send for Hmac&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T&gt; Send for HeaderMap&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Keys&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Values&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValuesMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for GetAll&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for OccupiedEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ValueIter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HeaderName","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl Send for HeaderValue","synthetic":true,"types":[]},{"text":"impl Send for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Send for ToStrError","synthetic":true,"types":[]},{"text":"impl Send for Method","synthetic":true,"types":[]},{"text":"impl Send for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Request&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for StatusCode","synthetic":true,"types":[]},{"text":"impl Send for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl Send for Authority","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Scheme","synthetic":true,"types":[]},{"text":"impl Send for Uri","synthetic":true,"types":[]},{"text":"impl Send for Parts","synthetic":true,"types":[]},{"text":"impl Send for InvalidUri","synthetic":true,"types":[]},{"text":"impl Send for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Send for Version","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Sync&gt; Send for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for IterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for Drain&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueIterMut&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Send&gt; Send for ValueDrain&lt;'a, T&gt;","synthetic":false,"types":[]}];
implementors["http_body"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Data&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for Trailers&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SizeHint","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Send for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Header&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["httpdate"] = [{"text":"impl Send for HttpDate","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for Timestamp","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Rfc3339Timestamp","synthetic":true,"types":[]}];
implementors["hyper"] = [{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Upgraded","synthetic":true,"types":[]},{"text":"impl Send for OnUpgrade","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]},{"text":"impl Send for GaiResolver","synthetic":true,"types":[]},{"text":"impl Send for GaiAddrs","synthetic":true,"types":[]},{"text":"impl Send for GaiFuture","synthetic":true,"types":[]},{"text":"impl Send for InvalidNameError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for HttpConnector&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HttpInfo","synthetic":true,"types":[]},{"text":"impl Send for Connected","synthetic":true,"types":[]},{"text":"impl&lt;C, B&gt; Send for Client&lt;C, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for SendRequest&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, B&gt; Send for Connection&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;B as Body&gt;::Data: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for ResponseFuture","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parts&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;C, B, T&gt; Send for Connect&lt;C, B, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["hyper_rustls"] = [{"text":"impl&lt;T&gt; Send for HttpsConnector&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for MaybeHttpsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Send for Idna","synthetic":true,"types":[]},{"text":"impl Send for Config","synthetic":true,"types":[]},{"text":"impl Send for Errors","synthetic":true,"types":[]}];
implementors["indexmap"] = [{"text":"impl&lt;'a, K, V&gt; Send for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Send for IndexMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for ValuesMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Drain&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Send for IndexSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Difference&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Intersection&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S1, S2&gt; Send for SymmetricDifference&lt;'a, T, S1, S2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S1: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Send for Union&lt;'a, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ipnet"] = [{"text":"impl Send for IpAddrRange","synthetic":true,"types":[]},{"text":"impl Send for Ipv4AddrRange","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddrRange","synthetic":true,"types":[]},{"text":"impl Send for IpNet","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Net","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Net","synthetic":true,"types":[]},{"text":"impl Send for PrefixLenError","synthetic":true,"types":[]},{"text":"impl Send for IpSubnets","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Subnets","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Subnets","synthetic":true,"types":[]},{"text":"impl Send for AddrParseError","synthetic":true,"types":[]}];
implementors["isolang"] = [{"text":"impl Send for Language","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["j4rs"] = [{"text":"impl !Send for Jvm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for JvmBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvocationArg","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Null&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InstanceReceiver","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClasspathEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for JavaOpt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for J4RsError","synthetic":true,"types":[]},{"text":"impl Send for LocalJarArtifact","synthetic":true,"types":[]},{"text":"impl Send for MavenArtifact","synthetic":true,"types":[]},{"text":"impl Send for MavenSettings","synthetic":true,"types":[]},{"text":"impl Send for MavenArtifactRepo","synthetic":true,"types":[]},{"text":"impl Send for FxController","synthetic":true,"types":[]},{"text":"impl Send for FxEventType","synthetic":true,"types":[]},{"text":"impl Send for Instance","synthetic":false,"types":[]}];
implementors["java_locator"] = [{"text":"impl Send for JavaLocatorError","synthetic":true,"types":[]}];
implementors["jni_sys"] = [{"text":"impl Send for _jobject","synthetic":true,"types":[]},{"text":"impl !Send for jvalue","synthetic":true,"types":[]},{"text":"impl Send for _jfieldID","synthetic":true,"types":[]},{"text":"impl Send for _jmethodID","synthetic":true,"types":[]},{"text":"impl Send for jobjectRefType","synthetic":true,"types":[]},{"text":"impl !Send for JNINativeMethod","synthetic":true,"types":[]},{"text":"impl !Send for JNINativeInterface_","synthetic":true,"types":[]},{"text":"impl !Send for JNIEnv_","synthetic":true,"types":[]},{"text":"impl !Send for JavaVMOption","synthetic":true,"types":[]},{"text":"impl !Send for JavaVMInitArgs","synthetic":true,"types":[]},{"text":"impl !Send for JavaVMAttachArgs","synthetic":true,"types":[]},{"text":"impl !Send for JNIInvokeInterface_","synthetic":true,"types":[]}];
implementors["lexical_core"] = [{"text":"impl Send for ErrorCode","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Send for statvfs","synthetic":true,"types":[]},{"text":"impl Send for max_align_t","synthetic":true,"types":[]},{"text":"impl Send for sigaction","synthetic":true,"types":[]},{"text":"impl Send for statfs","synthetic":true,"types":[]},{"text":"impl Send for flock","synthetic":true,"types":[]},{"text":"impl Send for flock64","synthetic":true,"types":[]},{"text":"impl Send for siginfo_t","synthetic":true,"types":[]},{"text":"impl !Send for stack_t","synthetic":true,"types":[]},{"text":"impl Send for stat","synthetic":true,"types":[]},{"text":"impl Send for stat64","synthetic":true,"types":[]},{"text":"impl Send for statfs64","synthetic":true,"types":[]},{"text":"impl Send for statvfs64","synthetic":true,"types":[]},{"text":"impl Send for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Send for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Send for user_regs_struct","synthetic":true,"types":[]},{"text":"impl !Send for user","synthetic":true,"types":[]},{"text":"impl !Send for mcontext_t","synthetic":true,"types":[]},{"text":"impl Send for ipc_perm","synthetic":true,"types":[]},{"text":"impl Send for shmid_ds","synthetic":true,"types":[]},{"text":"impl Send for termios2","synthetic":true,"types":[]},{"text":"impl Send for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Send for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl !Send for ucontext_t","synthetic":true,"types":[]},{"text":"impl Send for sigset_t","synthetic":true,"types":[]},{"text":"impl Send for sysinfo","synthetic":true,"types":[]},{"text":"impl Send for msqid_ds","synthetic":true,"types":[]},{"text":"impl Send for sem_t","synthetic":true,"types":[]},{"text":"impl Send for statx","synthetic":true,"types":[]},{"text":"impl Send for statx_timestamp","synthetic":true,"types":[]},{"text":"impl !Send for aiocb","synthetic":true,"types":[]},{"text":"impl Send for __exit_status","synthetic":true,"types":[]},{"text":"impl Send for __timeval","synthetic":true,"types":[]},{"text":"impl !Send for glob64_t","synthetic":true,"types":[]},{"text":"impl !Send for msghdr","synthetic":true,"types":[]},{"text":"impl Send for cmsghdr","synthetic":true,"types":[]},{"text":"impl Send for termios","synthetic":true,"types":[]},{"text":"impl Send for mallinfo","synthetic":true,"types":[]},{"text":"impl Send for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Send for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Send for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Send for nlattr","synthetic":true,"types":[]},{"text":"impl !Send for rtentry","synthetic":true,"types":[]},{"text":"impl Send for timex","synthetic":true,"types":[]},{"text":"impl Send for ntptimeval","synthetic":true,"types":[]},{"text":"impl !Send for regex_t","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Send for utmpx","synthetic":true,"types":[]},{"text":"impl Send for fpos64_t","synthetic":true,"types":[]},{"text":"impl Send for rlimit64","synthetic":true,"types":[]},{"text":"impl !Send for glob_t","synthetic":true,"types":[]},{"text":"impl !Send for passwd","synthetic":true,"types":[]},{"text":"impl !Send for spwd","synthetic":true,"types":[]},{"text":"impl Send for dqblk","synthetic":true,"types":[]},{"text":"impl Send for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Send for itimerspec","synthetic":true,"types":[]},{"text":"impl Send for fsid_t","synthetic":true,"types":[]},{"text":"impl Send for packet_mreq","synthetic":true,"types":[]},{"text":"impl Send for cpu_set_t","synthetic":true,"types":[]},{"text":"impl !Send for if_nameindex","synthetic":true,"types":[]},{"text":"impl Send for msginfo","synthetic":true,"types":[]},{"text":"impl Send for sembuf","synthetic":true,"types":[]},{"text":"impl Send for input_event","synthetic":true,"types":[]},{"text":"impl Send for input_id","synthetic":true,"types":[]},{"text":"impl Send for input_absinfo","synthetic":true,"types":[]},{"text":"impl Send for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Send for input_mask","synthetic":true,"types":[]},{"text":"impl Send for ff_replay","synthetic":true,"types":[]},{"text":"impl Send for ff_trigger","synthetic":true,"types":[]},{"text":"impl Send for ff_envelope","synthetic":true,"types":[]},{"text":"impl Send for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl !Send for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Send for ff_effect","synthetic":true,"types":[]},{"text":"impl !Send for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Send for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Send for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Send for ucred","synthetic":true,"types":[]},{"text":"impl !Send for mntent","synthetic":true,"types":[]},{"text":"impl !Send for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Send for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Send for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Send for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Send for arpd_request","synthetic":true,"types":[]},{"text":"impl Send for inotify_event","synthetic":true,"types":[]},{"text":"impl Send for fanotify_response","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Send for regmatch_t","synthetic":true,"types":[]},{"text":"impl Send for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Send for can_filter","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Send for dirent","synthetic":true,"types":[]},{"text":"impl Send for dirent64","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Send for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Send for mq_attr","synthetic":true,"types":[]},{"text":"impl Send for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Send for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Send for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Send for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Send for can_frame","synthetic":true,"types":[]},{"text":"impl Send for canfd_frame","synthetic":true,"types":[]},{"text":"impl Send for timezone","synthetic":true,"types":[]},{"text":"impl Send for in_addr","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq","synthetic":true,"types":[]},{"text":"impl Send for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Send for sockaddr","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl !Send for addrinfo","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Send for fd_set","synthetic":true,"types":[]},{"text":"impl !Send for tm","synthetic":true,"types":[]},{"text":"impl Send for sched_param","synthetic":true,"types":[]},{"text":"impl !Send for Dl_info","synthetic":true,"types":[]},{"text":"impl !Send for lconv","synthetic":true,"types":[]},{"text":"impl Send for in_pktinfo","synthetic":true,"types":[]},{"text":"impl !Send for ifaddrs","synthetic":true,"types":[]},{"text":"impl Send for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Send for arpreq","synthetic":true,"types":[]},{"text":"impl Send for arpreq_old","synthetic":true,"types":[]},{"text":"impl Send for arphdr","synthetic":true,"types":[]},{"text":"impl !Send for mmsghdr","synthetic":true,"types":[]},{"text":"impl Send for epoll_event","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Send for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Send for utsname","synthetic":true,"types":[]},{"text":"impl !Send for sigevent","synthetic":true,"types":[]},{"text":"impl Send for in6_addr","synthetic":true,"types":[]},{"text":"impl Send for DIR","synthetic":true,"types":[]},{"text":"impl !Send for group","synthetic":true,"types":[]},{"text":"impl Send for utimbuf","synthetic":true,"types":[]},{"text":"impl Send for timeval","synthetic":true,"types":[]},{"text":"impl Send for timespec","synthetic":true,"types":[]},{"text":"impl Send for rlimit","synthetic":true,"types":[]},{"text":"impl Send for rusage","synthetic":true,"types":[]},{"text":"impl Send for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl !Send for hostent","synthetic":true,"types":[]},{"text":"impl !Send for iovec","synthetic":true,"types":[]},{"text":"impl Send for pollfd","synthetic":true,"types":[]},{"text":"impl Send for winsize","synthetic":true,"types":[]},{"text":"impl Send for linger","synthetic":true,"types":[]},{"text":"impl !Send for sigval","synthetic":true,"types":[]},{"text":"impl Send for itimerval","synthetic":true,"types":[]},{"text":"impl Send for tms","synthetic":true,"types":[]},{"text":"impl !Send for servent","synthetic":true,"types":[]},{"text":"impl !Send for protoent","synthetic":true,"types":[]},{"text":"impl Send for FILE","synthetic":true,"types":[]},{"text":"impl Send for fpos_t","synthetic":true,"types":[]}];
implementors["libloading"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Library","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Symbol&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Send for Library","synthetic":false,"types":[]},{"text":"impl&lt;'lib, T:&nbsp;Send&gt; Send for Symbol&lt;'lib, T&gt;","synthetic":false,"types":[]}];
implementors["linked_hash_map"] = [{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for Entry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&nbsp;=&nbsp;RandomState&gt; !Send for OccupiedEntry&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K:&nbsp;Send, V:&nbsp;Send, S:&nbsp;Send&gt; Send for LinkedHashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Iter&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for IterMut&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V&gt; Send for IntoIter&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Send for Entries&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]}];
implementors["md5"] = [{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Send for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime"] = [{"text":"impl Send for Mime","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FromStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Params&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["mime_guess"] = [{"text":"impl Send for MimeGuess","synthetic":true,"types":[]},{"text":"impl Send for Iter","synthetic":true,"types":[]},{"text":"impl Send for IterRaw","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Send for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Send for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Send for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Send for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Send for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Send for InflateState","synthetic":true,"types":[]},{"text":"impl Send for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Send for MZFlush","synthetic":true,"types":[]},{"text":"impl Send for MZStatus","synthetic":true,"types":[]},{"text":"impl Send for MZError","synthetic":true,"types":[]},{"text":"impl Send for DataFormat","synthetic":true,"types":[]},{"text":"impl Send for StreamResult","synthetic":true,"types":[]}];
implementors["mio"] = [{"text":"impl Send for Interest","synthetic":true,"types":[]},{"text":"impl Send for Poll","synthetic":true,"types":[]},{"text":"impl Send for Registry","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SourceFd&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SocketAddr","synthetic":true,"types":[]},{"text":"impl Send for Sender","synthetic":true,"types":[]},{"text":"impl Send for Receiver","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl Send for Waker","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Events","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for TcpSocket","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepalive","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]}];
implementors["nix"] = [{"text":"impl&lt;'d&gt; Send for Iter&lt;'d&gt;","synthetic":true,"types":[]},{"text":"impl Send for Entry","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Errno","synthetic":true,"types":[]},{"text":"impl Send for PosixFadviseAdvice","synthetic":true,"types":[]},{"text":"impl Send for AtFlags","synthetic":true,"types":[]},{"text":"impl Send for OFlag","synthetic":true,"types":[]},{"text":"impl Send for SealFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FcntlArg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FlockArg","synthetic":true,"types":[]},{"text":"impl Send for SpliceFFlags","synthetic":true,"types":[]},{"text":"impl Send for FallocateFlags","synthetic":true,"types":[]},{"text":"impl Send for InterfaceAddress","synthetic":true,"types":[]},{"text":"impl !Send for InterfaceAddressIterator","synthetic":true,"types":[]},{"text":"impl Send for ModuleInitFlags","synthetic":true,"types":[]},{"text":"impl Send for DeleteModuleFlags","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MntFlags","synthetic":true,"types":[]},{"text":"impl Send for MQ_OFlag","synthetic":true,"types":[]},{"text":"impl Send for FdFlag","synthetic":true,"types":[]},{"text":"impl Send for MqAttr","synthetic":true,"types":[]},{"text":"impl Send for InterfaceFlags","synthetic":true,"types":[]},{"text":"impl Send for PollFd","synthetic":true,"types":[]},{"text":"impl Send for PollFlags","synthetic":true,"types":[]},{"text":"impl Send for OpenptyResult","synthetic":true,"types":[]},{"text":"impl Send for ForkptyResult","synthetic":true,"types":[]},{"text":"impl Send for PtyMaster","synthetic":true,"types":[]},{"text":"impl Send for CloneFlags","synthetic":true,"types":[]},{"text":"impl Send for CpuSet","synthetic":true,"types":[]},{"text":"impl Send for AioFsyncMode","synthetic":true,"types":[]},{"text":"impl Send for LioOpcode","synthetic":true,"types":[]},{"text":"impl Send for LioMode","synthetic":true,"types":[]},{"text":"impl Send for AioCancelStat","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Buffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for AioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for LioCb&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for EpollFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollOp","synthetic":true,"types":[]},{"text":"impl Send for EpollCreateFlags","synthetic":true,"types":[]},{"text":"impl Send for EpollEvent","synthetic":true,"types":[]},{"text":"impl Send for EfdFlags","synthetic":true,"types":[]},{"text":"impl Send for MemFdCreateFlag","synthetic":true,"types":[]},{"text":"impl Send for ProtFlags","synthetic":true,"types":[]},{"text":"impl Send for MapFlags","synthetic":true,"types":[]},{"text":"impl Send for MmapAdvise","synthetic":true,"types":[]},{"text":"impl Send for MsFlags","synthetic":true,"types":[]},{"text":"impl Send for MlockAllFlags","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Options","synthetic":true,"types":[]},{"text":"impl Send for QuotaType","synthetic":true,"types":[]},{"text":"impl Send for QuotaFmt","synthetic":true,"types":[]},{"text":"impl Send for QuotaValidFlags","synthetic":true,"types":[]},{"text":"impl Send for Dqblk","synthetic":true,"types":[]},{"text":"impl Send for RebootMode","synthetic":true,"types":[]},{"text":"impl Send for FdSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Fds&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for SigEvent","synthetic":true,"types":[]},{"text":"impl Send for Signal","synthetic":true,"types":[]},{"text":"impl Send for SignalIterator","synthetic":true,"types":[]},{"text":"impl Send for SaFlags","synthetic":true,"types":[]},{"text":"impl Send for SigmaskHow","synthetic":true,"types":[]},{"text":"impl Send for SigSet","synthetic":true,"types":[]},{"text":"impl Send for SigHandler","synthetic":true,"types":[]},{"text":"impl Send for SigAction","synthetic":true,"types":[]},{"text":"impl Send for SigevNotify","synthetic":true,"types":[]},{"text":"impl Send for SfdFlags","synthetic":true,"types":[]},{"text":"impl Send for SignalFd","synthetic":true,"types":[]},{"text":"impl Send for NetlinkAddr","synthetic":true,"types":[]},{"text":"impl Send for AlgAddr","synthetic":true,"types":[]},{"text":"impl Send for LinkAddr","synthetic":true,"types":[]},{"text":"impl Send for VsockAddr","synthetic":true,"types":[]},{"text":"impl Send for AddressFamily","synthetic":true,"types":[]},{"text":"impl Send for InetAddr","synthetic":true,"types":[]},{"text":"impl Send for IpAddr","synthetic":true,"types":[]},{"text":"impl Send for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Send for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Send for UnixAddr","synthetic":true,"types":[]},{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for ReuseAddr","synthetic":true,"types":[]},{"text":"impl Send for ReusePort","synthetic":true,"types":[]},{"text":"impl Send for TcpNoDelay","synthetic":true,"types":[]},{"text":"impl Send for Linger","synthetic":true,"types":[]},{"text":"impl Send for IpAddMembership","synthetic":true,"types":[]},{"text":"impl Send for IpDropMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6AddMembership","synthetic":true,"types":[]},{"text":"impl Send for Ipv6DropMembership","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastTtl","synthetic":true,"types":[]},{"text":"impl Send for IpMulticastLoop","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimeout","synthetic":true,"types":[]},{"text":"impl Send for SendTimeout","synthetic":true,"types":[]},{"text":"impl Send for Broadcast","synthetic":true,"types":[]},{"text":"impl Send for OobInline","synthetic":true,"types":[]},{"text":"impl Send for SocketError","synthetic":true,"types":[]},{"text":"impl Send for KeepAlive","synthetic":true,"types":[]},{"text":"impl Send for PeerCredentials","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepIdle","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepCount","synthetic":true,"types":[]},{"text":"impl Send for TcpKeepInterval","synthetic":true,"types":[]},{"text":"impl Send for RcvBuf","synthetic":true,"types":[]},{"text":"impl Send for SndBuf","synthetic":true,"types":[]},{"text":"impl Send for RcvBufForce","synthetic":true,"types":[]},{"text":"impl Send for SndBufForce","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for AcceptConn","synthetic":true,"types":[]},{"text":"impl Send for BindToDevice","synthetic":true,"types":[]},{"text":"impl Send for OriginalDst","synthetic":true,"types":[]},{"text":"impl Send for ReceiveTimestamp","synthetic":true,"types":[]},{"text":"impl Send for IpTransparent","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for PassCred","synthetic":true,"types":[]},{"text":"impl Send for TcpCongestion","synthetic":true,"types":[]},{"text":"impl Send for Ipv4PacketInfo","synthetic":true,"types":[]},{"text":"impl Send for Ipv6RecvPacketInfo","synthetic":true,"types":[]},{"text":"impl Send for UdpGsoSegment","synthetic":true,"types":[]},{"text":"impl Send for UdpGroSegment","synthetic":true,"types":[]},{"text":"impl Send for AlgSetAeadAuthSize","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AlgSetKey&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SockType","synthetic":true,"types":[]},{"text":"impl Send for SockProtocol","synthetic":true,"types":[]},{"text":"impl Send for SockFlag","synthetic":true,"types":[]},{"text":"impl Send for MsgFlags","synthetic":true,"types":[]},{"text":"impl Send for UnixCredentials","synthetic":true,"types":[]},{"text":"impl Send for IpMembershipRequest","synthetic":true,"types":[]},{"text":"impl Send for Ipv6MembershipRequest","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for RecvMsg&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for CmsgIterator&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ControlMessageOwned","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ControlMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, C&gt; Send for SendMmsgData&lt;'a, I, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; Send for RecvMmsgData&lt;'a, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SockLevel","synthetic":true,"types":[]},{"text":"impl Send for Shutdown","synthetic":true,"types":[]},{"text":"impl Send for SFlag","synthetic":true,"types":[]},{"text":"impl Send for Mode","synthetic":true,"types":[]},{"text":"impl Send for FchmodatFlags","synthetic":true,"types":[]},{"text":"impl Send for UtimensatFlags","synthetic":true,"types":[]},{"text":"impl Send for Statfs","synthetic":true,"types":[]},{"text":"impl Send for FsType","synthetic":true,"types":[]},{"text":"impl Send for FsFlags","synthetic":true,"types":[]},{"text":"impl Send for Statvfs","synthetic":true,"types":[]},{"text":"impl Send for SysInfo","synthetic":true,"types":[]},{"text":"impl Send for Termios","synthetic":true,"types":[]},{"text":"impl Send for BaudRate","synthetic":true,"types":[]},{"text":"impl Send for SetArg","synthetic":true,"types":[]},{"text":"impl Send for FlushArg","synthetic":true,"types":[]},{"text":"impl Send for FlowArg","synthetic":true,"types":[]},{"text":"impl Send for SpecialCharacterIndices","synthetic":true,"types":[]},{"text":"impl Send for InputFlags","synthetic":true,"types":[]},{"text":"impl Send for OutputFlags","synthetic":true,"types":[]},{"text":"impl Send for ControlFlags","synthetic":true,"types":[]},{"text":"impl Send for LocalFlags","synthetic":true,"types":[]},{"text":"impl Send for TimeSpec","synthetic":true,"types":[]},{"text":"impl Send for TimeVal","synthetic":true,"types":[]},{"text":"impl Send for RemoteIoVec","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Send for IoVec&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for UtsName","synthetic":true,"types":[]},{"text":"impl Send for WaitPidFlag","synthetic":true,"types":[]},{"text":"impl Send for WaitStatus","synthetic":true,"types":[]},{"text":"impl Send for AddWatchFlags","synthetic":true,"types":[]},{"text":"impl Send for InitFlags","synthetic":true,"types":[]},{"text":"impl Send for Inotify","synthetic":true,"types":[]},{"text":"impl Send for WatchDescriptor","synthetic":true,"types":[]},{"text":"impl Send for InotifyEvent","synthetic":true,"types":[]},{"text":"impl Send for TimerFd","synthetic":true,"types":[]},{"text":"impl Send for ClockId","synthetic":true,"types":[]},{"text":"impl Send for TimerFlags","synthetic":true,"types":[]},{"text":"impl Send for TimerSetTimeFlags","synthetic":true,"types":[]},{"text":"impl Send for Expiration","synthetic":true,"types":[]},{"text":"impl Send for ClockId","synthetic":true,"types":[]},{"text":"impl !Send for UContext","synthetic":true,"types":[]},{"text":"impl Send for Uid","synthetic":true,"types":[]},{"text":"impl Send for Gid","synthetic":true,"types":[]},{"text":"impl Send for Pid","synthetic":true,"types":[]},{"text":"impl Send for ForkResult","synthetic":true,"types":[]},{"text":"impl Send for FchownatFlags","synthetic":true,"types":[]},{"text":"impl Send for Whence","synthetic":true,"types":[]},{"text":"impl Send for LinkatFlags","synthetic":true,"types":[]},{"text":"impl Send for UnlinkatFlags","synthetic":true,"types":[]},{"text":"impl Send for PathconfVar","synthetic":true,"types":[]},{"text":"impl Send for SysconfVar","synthetic":true,"types":[]},{"text":"impl Send for AccessFlags","synthetic":true,"types":[]},{"text":"impl Send for User","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Dir","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Send for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Send for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Send for FloatErrorKind","synthetic":true,"types":[]},{"text":"impl Send for ParseFloatError","synthetic":true,"types":[]}];
implementors["oauth2"] = [{"text":"impl Send for BasicTokenType","synthetic":true,"types":[]},{"text":"impl Send for BasicErrorResponseType","synthetic":true,"types":[]},{"text":"impl Send for EmptyExtraDeviceAuthorizationFields","synthetic":true,"types":[]},{"text":"impl&lt;EF&gt; Send for DeviceAuthorizationResponse&lt;EF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DeviceCodeErrorResponseType","synthetic":true,"types":[]},{"text":"impl Send for StandardRevocableToken","synthetic":true,"types":[]},{"text":"impl Send for RevocationErrorResponseType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Error&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ClientId","synthetic":true,"types":[]},{"text":"impl Send for AuthUrl","synthetic":true,"types":[]},{"text":"impl Send for TokenUrl","synthetic":true,"types":[]},{"text":"impl Send for RedirectUrl","synthetic":true,"types":[]},{"text":"impl Send for IntrospectionUrl","synthetic":true,"types":[]},{"text":"impl Send for RevocationUrl","synthetic":true,"types":[]},{"text":"impl Send for DeviceAuthorizationUrl","synthetic":true,"types":[]},{"text":"impl Send for EndUserVerificationUrl","synthetic":true,"types":[]},{"text":"impl Send for ResponseType","synthetic":true,"types":[]},{"text":"impl Send for ResourceOwnerUsername","synthetic":true,"types":[]},{"text":"impl Send for Scope","synthetic":true,"types":[]},{"text":"impl Send for PkceCodeChallengeMethod","synthetic":true,"types":[]},{"text":"impl Send for PkceCodeVerifier","synthetic":true,"types":[]},{"text":"impl Send for PkceCodeChallenge","synthetic":true,"types":[]},{"text":"impl Send for ClientSecret","synthetic":true,"types":[]},{"text":"impl Send for CsrfToken","synthetic":true,"types":[]},{"text":"impl Send for AuthorizationCode","synthetic":true,"types":[]},{"text":"impl Send for RefreshToken","synthetic":true,"types":[]},{"text":"impl Send for AccessToken","synthetic":true,"types":[]},{"text":"impl Send for ResourceOwnerPassword","synthetic":true,"types":[]},{"text":"impl Send for DeviceCode","synthetic":true,"types":[]},{"text":"impl Send for UserCode","synthetic":true,"types":[]},{"text":"impl Send for ConfigurationError","synthetic":true,"types":[]},{"text":"impl Send for AuthType","synthetic":true,"types":[]},{"text":"impl&lt;TE, TR, TT, TIR, RT, TRE&gt; Send for Client&lt;TE, TR, TT, TIR, RT, TRE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RT: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TIR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TRE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for AuthorizationRequest&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for HttpRequest","synthetic":true,"types":[]},{"text":"impl Send for HttpResponse","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; Send for CodeTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; Send for RefreshTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; Send for PasswordTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TR, TT&gt; Send for ClientCredentialsTokenRequest&lt;'a, TE, TR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE, TIR, TT&gt; Send for IntrospectionRequest&lt;'a, TE, TIR, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TIR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, RT, TE&gt; Send for RevocationRequest&lt;'a, RT, TE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RT: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, TE&gt; Send for DeviceAuthorizationRequest&lt;'a, TE&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TE: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, TR, TT, EF&gt; Send for DeviceAccessTokenRequest&lt;'a, 'b, TR, TT, EF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;TR: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EmptyExtraTokenFields","synthetic":true,"types":[]},{"text":"impl&lt;EF, TT&gt; Send for StandardTokenResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;EF, TT&gt; Send for StandardTokenIntrospectionResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StandardErrorResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RE, T&gt; Send for RequestTokenError&lt;RE, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RE: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OnceCell&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, F&gt; Send for Lazy&lt;T, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["parking"] = [{"text":"impl Send for Parker","synthetic":true,"types":[]},{"text":"impl Send for Unparker","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Send for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["phf"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Set&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for OrderedMap&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send + Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Entries&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Keys&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Send for Values&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for OrderedSet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["polling"] = [{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl Send for Poller","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Send for YesS3","synthetic":true,"types":[]},{"text":"impl Send for NoS3","synthetic":true,"types":[]},{"text":"impl Send for YesS4","synthetic":true,"types":[]},{"text":"impl Send for NoS4","synthetic":true,"types":[]},{"text":"impl Send for YesA1","synthetic":true,"types":[]},{"text":"impl Send for NoA1","synthetic":true,"types":[]},{"text":"impl Send for YesA2","synthetic":true,"types":[]},{"text":"impl Send for NoA2","synthetic":true,"types":[]},{"text":"impl Send for YesNI","synthetic":true,"types":[]},{"text":"impl Send for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Send for SseMachine&lt;S3, S4, NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S3: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;S4: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Send for Avx2Machine&lt;NI&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NI: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for vec128_storage","synthetic":true,"types":[]},{"text":"impl Send for vec256_storage","synthetic":true,"types":[]},{"text":"impl Send for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl !Send for IntoIter","synthetic":true,"types":[]},{"text":"impl !Send for TokenStream","synthetic":true,"types":[]},{"text":"impl !Send for LexError","synthetic":true,"types":[]},{"text":"impl !Send for Span","synthetic":true,"types":[]},{"text":"impl !Send for TokenTree","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl Send for Delimiter","synthetic":true,"types":[]},{"text":"impl !Send for Punct","synthetic":true,"types":[]},{"text":"impl Send for Spacing","synthetic":true,"types":[]},{"text":"impl !Send for Ident","synthetic":true,"types":[]},{"text":"impl !Send for Literal","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Send for Bernoulli","synthetic":true,"types":[]},{"text":"impl Send for BernoulliError","synthetic":true,"types":[]},{"text":"impl Send for Binomial","synthetic":true,"types":[]},{"text":"impl Send for Cauchy","synthetic":true,"types":[]},{"text":"impl Send for Dirichlet","synthetic":true,"types":[]},{"text":"impl Send for Exp1","synthetic":true,"types":[]},{"text":"impl Send for Exp","synthetic":true,"types":[]},{"text":"impl Send for Gamma","synthetic":true,"types":[]},{"text":"impl Send for ChiSquared","synthetic":true,"types":[]},{"text":"impl Send for FisherF","synthetic":true,"types":[]},{"text":"impl Send for StudentT","synthetic":true,"types":[]},{"text":"impl Send for Beta","synthetic":true,"types":[]},{"text":"impl Send for StandardNormal","synthetic":true,"types":[]},{"text":"impl Send for Normal","synthetic":true,"types":[]},{"text":"impl Send for LogNormal","synthetic":true,"types":[]},{"text":"impl Send for Pareto","synthetic":true,"types":[]},{"text":"impl Send for Poisson","synthetic":true,"types":[]},{"text":"impl Send for Triangular","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UniformDuration","synthetic":true,"types":[]},{"text":"impl Send for UnitCircle","synthetic":true,"types":[]},{"text":"impl Send for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Send for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Send for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WeightedError","synthetic":true,"types":[]},{"text":"impl Send for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Send for Open01","synthetic":true,"types":[]},{"text":"impl Send for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Send for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Standard","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Send for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EntropyRng","synthetic":true,"types":[]},{"text":"impl Send for StepRng","synthetic":true,"types":[]},{"text":"impl Send for StdRng","synthetic":true,"types":[]},{"text":"impl !Send for ThreadRng","synthetic":true,"types":[]},{"text":"impl Send for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IndexVecIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Send for SliceChooseIter&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Send for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Send for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for OsRng","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Send for RegexSet","synthetic":true,"types":[]},{"text":"impl Send for SetMatches","synthetic":true,"types":[]},{"text":"impl Send for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl Send for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Send for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl Send for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Send for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; !Send for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Send for ReplacerRef&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Send for NoExpand&lt;'t&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for WithComments","synthetic":true,"types":[]},{"text":"impl Send for Comment","synthetic":true,"types":[]},{"text":"impl Send for Ast","synthetic":true,"types":[]},{"text":"impl Send for Alternation","synthetic":true,"types":[]},{"text":"impl Send for Concat","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for LiteralKind","synthetic":true,"types":[]},{"text":"impl Send for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassPerl","synthetic":true,"types":[]},{"text":"impl Send for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Send for ClassAscii","synthetic":true,"types":[]},{"text":"impl Send for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Send for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Send for ClassSet","synthetic":true,"types":[]},{"text":"impl Send for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Send for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Send for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Send for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Send for Assertion","synthetic":true,"types":[]},{"text":"impl Send for AssertionKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for CaptureName","synthetic":true,"types":[]},{"text":"impl Send for SetFlags","synthetic":true,"types":[]},{"text":"impl Send for Flags","synthetic":true,"types":[]},{"text":"impl Send for FlagsItem","synthetic":true,"types":[]},{"text":"impl Send for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Send for Flag","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Literals","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Printer","synthetic":true,"types":[]},{"text":"impl Send for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl Send for Translator","synthetic":true,"types":[]},{"text":"impl Send for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Hir","synthetic":true,"types":[]},{"text":"impl Send for HirKind","synthetic":true,"types":[]},{"text":"impl Send for Literal","synthetic":true,"types":[]},{"text":"impl Send for Class","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Send for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Send for Anchor","synthetic":true,"types":[]},{"text":"impl Send for WordBoundary","synthetic":true,"types":[]},{"text":"impl Send for Group","synthetic":true,"types":[]},{"text":"impl Send for GroupKind","synthetic":true,"types":[]},{"text":"impl Send for Repetition","synthetic":true,"types":[]},{"text":"impl Send for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Send for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Send for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Send for Parser","synthetic":true,"types":[]},{"text":"impl Send for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequence","synthetic":true,"types":[]},{"text":"impl Send for Utf8Range","synthetic":true,"types":[]},{"text":"impl Send for Utf8Sequences","synthetic":true,"types":[]}];
implementors["reqwest"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Form","synthetic":true,"types":[]},{"text":"impl Send for Part","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for ClientBuilder","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Body","synthetic":true,"types":[]},{"text":"impl Send for Client","synthetic":true,"types":[]},{"text":"impl Send for ClientBuilder","synthetic":true,"types":[]},{"text":"impl Send for Form","synthetic":true,"types":[]},{"text":"impl Send for Part","synthetic":true,"types":[]},{"text":"impl Send for Request","synthetic":true,"types":[]},{"text":"impl Send for RequestBuilder","synthetic":true,"types":[]},{"text":"impl Send for Response","synthetic":true,"types":[]},{"text":"impl Send for Proxy","synthetic":true,"types":[]},{"text":"impl Send for Policy","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attempt&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Action","synthetic":true,"types":[]},{"text":"impl Send for Certificate","synthetic":true,"types":[]},{"text":"impl Send for Identity","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Send for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SealingKey","synthetic":true,"types":[]},{"text":"impl Send for OpeningKey","synthetic":true,"types":[]},{"text":"impl Send for Nonce","synthetic":true,"types":[]},{"text":"impl Send for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Send for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for UnboundKey","synthetic":true,"types":[]},{"text":"impl Send for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Send for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Digest","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Send for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Send for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Unspecified","synthetic":true,"types":[]},{"text":"impl Send for KeyRejected","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Salt","synthetic":true,"types":[]},{"text":"impl Send for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Send for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Tag","synthetic":true,"types":[]},{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl Send for Context","synthetic":true,"types":[]},{"text":"impl Send for Algorithm","synthetic":true,"types":[]},{"text":"impl Send for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for SystemRandom","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Send for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Send for RsaParameters","synthetic":true,"types":[]},{"text":"impl Send for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rustc_hash"] = [{"text":"impl Send for FxHasher","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl Send for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl Send for Payload","synthetic":true,"types":[]},{"text":"impl Send for PayloadU24","synthetic":true,"types":[]},{"text":"impl Send for PayloadU16","synthetic":true,"types":[]},{"text":"impl Send for PayloadU8","synthetic":true,"types":[]},{"text":"impl Send for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for u24","synthetic":true,"types":[]},{"text":"impl Send for MessageDeframer","synthetic":true,"types":[]},{"text":"impl Send for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl Send for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl Send for Compression","synthetic":true,"types":[]},{"text":"impl Send for ContentType","synthetic":true,"types":[]},{"text":"impl Send for HandshakeType","synthetic":true,"types":[]},{"text":"impl Send for AlertLevel","synthetic":true,"types":[]},{"text":"impl Send for AlertDescription","synthetic":true,"types":[]},{"text":"impl Send for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl Send for ExtensionType","synthetic":true,"types":[]},{"text":"impl Send for ServerNameType","synthetic":true,"types":[]},{"text":"impl Send for NamedCurve","synthetic":true,"types":[]},{"text":"impl Send for NamedGroup","synthetic":true,"types":[]},{"text":"impl Send for CipherSuite","synthetic":true,"types":[]},{"text":"impl Send for ECPointFormat","synthetic":true,"types":[]},{"text":"impl Send for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl Send for ECCurveType","synthetic":true,"types":[]},{"text":"impl Send for SignatureScheme","synthetic":true,"types":[]},{"text":"impl Send for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl Send for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl Send for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl Send for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl Send for Random","synthetic":true,"types":[]},{"text":"impl Send for SessionID","synthetic":true,"types":[]},{"text":"impl Send for UnknownExtension","synthetic":true,"types":[]},{"text":"impl Send for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl Send for ServerName","synthetic":true,"types":[]},{"text":"impl Send for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl Send for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl Send for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl Send for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Send for ClientExtension","synthetic":true,"types":[]},{"text":"impl Send for ServerExtension","synthetic":true,"types":[]},{"text":"impl Send for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl Send for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl Send for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl Send for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl Send for CertificateExtension","synthetic":true,"types":[]},{"text":"impl Send for CertificateEntry","synthetic":true,"types":[]},{"text":"impl Send for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl Send for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for ECParameters","synthetic":true,"types":[]},{"text":"impl Send for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl Send for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl Send for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl Send for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl Send for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl Send for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl Send for CertReqExtension","synthetic":true,"types":[]},{"text":"impl Send for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Send for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl Send for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl Send for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Send for CertificateStatus","synthetic":true,"types":[]},{"text":"impl Send for HandshakePayload","synthetic":true,"types":[]},{"text":"impl Send for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl Send for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl Send for MessagePayload","synthetic":true,"types":[]},{"text":"impl Send for Message","synthetic":true,"types":[]},{"text":"impl Send for MessageError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl Send for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl Send for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl Send for OwnedTrustAnchor","synthetic":true,"types":[]},{"text":"impl Send for RootCertStore","synthetic":true,"types":[]},{"text":"impl Send for TLSError","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T:&nbsp;?Sized&gt; Send for Stream&lt;'a, S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Send for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for HandshakeSignatureValid","synthetic":true,"types":[]},{"text":"impl Send for ServerCertVerified","synthetic":true,"types":[]},{"text":"impl Send for ClientCertVerified","synthetic":true,"types":[]},{"text":"impl Send for WebPKIVerifier","synthetic":true,"types":[]},{"text":"impl Send for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Send for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Send for NoClientAuth","synthetic":true,"types":[]},{"text":"impl Send for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl Send for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DangerousClientConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClientConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteEarlyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ClientSession","synthetic":true,"types":[]},{"text":"impl Send for PrivateKey","synthetic":true,"types":[]},{"text":"impl Send for Certificate","synthetic":true,"types":[]},{"text":"impl Send for NoKeyLog","synthetic":true,"types":[]},{"text":"impl Send for KeyLogFile","synthetic":true,"types":[]},{"text":"impl Send for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl Send for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Send for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ClientHello&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ServerConfig","synthetic":true,"types":[]},{"text":"impl Send for ServerSession","synthetic":true,"types":[]},{"text":"impl Send for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl Send for Ticketer","synthetic":true,"types":[]},{"text":"impl Send for CertifiedKey","synthetic":true,"types":[]},{"text":"impl Send for RSASigningKey","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Send for Buffer","synthetic":true,"types":[]}];
implementors["same_file"] = [{"text":"impl Send for Handle","synthetic":true,"types":[]}];
implementors["schemars"] = [{"text":"impl !Send for SchemaSettings","synthetic":true,"types":[]},{"text":"impl !Send for SchemaGenerator","synthetic":true,"types":[]},{"text":"impl Send for Schema","synthetic":true,"types":[]},{"text":"impl Send for RootSchema","synthetic":true,"types":[]},{"text":"impl Send for SchemaObject","synthetic":true,"types":[]},{"text":"impl Send for Metadata","synthetic":true,"types":[]},{"text":"impl Send for SubschemaValidation","synthetic":true,"types":[]},{"text":"impl Send for NumberValidation","synthetic":true,"types":[]},{"text":"impl Send for StringValidation","synthetic":true,"types":[]},{"text":"impl Send for ArrayValidation","synthetic":true,"types":[]},{"text":"impl Send for ObjectValidation","synthetic":true,"types":[]},{"text":"impl Send for InstanceType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SingleOrVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ReplaceBoolSchemas","synthetic":true,"types":[]},{"text":"impl Send for RemoveRefSiblings","synthetic":true,"types":[]},{"text":"impl Send for SetSingleExample","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; Send for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UnitDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for BoolDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for IsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U8Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U16Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for UsizeDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for F64Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for CharDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for I128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U128Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for U32Deserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for StrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedStrDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for StringDeserializer&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for CowStrDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for BytesDeserializer&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Send for BorrowedBytesDeserializer&lt;'de, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Send for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Send for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Send for Impossible&lt;Ok, Error&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Error: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;Ok: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_derive_internals"] = [{"text":"impl&lt;'a&gt; !Send for Container&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Data&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Variant&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Field&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Style","synthetic":true,"types":[]},{"text":"impl Send for Name","synthetic":true,"types":[]},{"text":"impl Send for RenameAllRules","synthetic":true,"types":[]},{"text":"impl !Send for Container","synthetic":true,"types":[]},{"text":"impl Send for TagType","synthetic":true,"types":[]},{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl Send for Ctxt","synthetic":true,"types":[]},{"text":"impl Send for RenameRule","synthetic":true,"types":[]},{"text":"impl Send for Derive","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;'a&gt; Send for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Send for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Category","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Send for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CharEscape","synthetic":true,"types":[]},{"text":"impl Send for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Serializer","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["serde_urlencoded"] = [{"text":"impl&lt;'de&gt; Send for Deserializer&lt;'de&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for Serializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for SeqSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for TupleSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for TupleStructSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for TupleVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for MapSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, Target&gt; !Send for StructSerializer&lt;'input, 'output, Target&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'input, 'output, T&gt; !Send for StructVariantSerializer&lt;'input, 'output, T&gt;","synthetic":true,"types":[]}];
implementors["serde_xml_rs"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl&lt;'a&gt; !Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Location","synthetic":true,"types":[]},{"text":"impl Send for Mapping","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl Send for Number","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Serializer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]}];
implementors["sha2"] = [{"text":"impl Send for Sha256","synthetic":true,"types":[]},{"text":"impl Send for Sha224","synthetic":true,"types":[]},{"text":"impl Send for Sha512","synthetic":true,"types":[]},{"text":"impl Send for Sha384","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc256","synthetic":true,"types":[]},{"text":"impl Send for Sha512Trunc224","synthetic":true,"types":[]}];
implementors["shellwords"] = [{"text":"impl Send for MismatchedQuotes","synthetic":true,"types":[]}];
implementors["signal_hook"] = [{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl&lt;R, E&gt; Send for SignalDelivery&lt;R, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for Pending&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;O&gt; Send for PollResult&lt;O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;O: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;SD, E&gt; Send for SignalIterator&lt;SD, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;SD: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for WithRawSiginfo","synthetic":true,"types":[]},{"text":"impl Send for SignalOnly","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Send for SignalsInfo&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Send for Forever&lt;'a, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;E as Exfiltrator&gt;::Storage: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Channel&lt;T&gt;","synthetic":false,"types":[]}];
implementors["signal_hook_registry"] = [{"text":"impl Send for SigId","synthetic":true,"types":[]}];
implementors["siphasher"] = [{"text":"impl Send for SipHasher13","synthetic":true,"types":[]},{"text":"impl Send for SipHasher24","synthetic":true,"types":[]},{"text":"impl Send for SipHasher","synthetic":true,"types":[]},{"text":"impl Send for Hash128","synthetic":true,"types":[]},{"text":"impl Send for SipHasher13","synthetic":true,"types":[]},{"text":"impl Send for SipHasher24","synthetic":true,"types":[]},{"text":"impl Send for SipHasher","synthetic":true,"types":[]}];
implementors["slab"] = [{"text":"impl&lt;T&gt; Send for Slab&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Drain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["socket2"] = [{"text":"impl Send for SockAddr","synthetic":true,"types":[]},{"text":"impl Send for Socket","synthetic":true,"types":[]},{"text":"impl Send for Domain","synthetic":true,"types":[]},{"text":"impl Send for Type","synthetic":true,"types":[]},{"text":"impl Send for Protocol","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for Mutex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized + Send&gt; Send for RwLock&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Once&lt;T&gt;","synthetic":false,"types":[]}];
implementors["strsim"] = [{"text":"impl Send for StrSimError","synthetic":true,"types":[]}];
implementors["subprocess"] = [{"text":"impl !Send for Exec","synthetic":true,"types":[]},{"text":"impl Send for CaptureData","synthetic":true,"types":[]},{"text":"impl Send for NullFile","synthetic":true,"types":[]},{"text":"impl !Send for Pipeline","synthetic":true,"types":[]},{"text":"impl Send for Communicator","synthetic":true,"types":[]},{"text":"impl Send for CommunicateError","synthetic":true,"types":[]},{"text":"impl Send for Popen","synthetic":true,"types":[]},{"text":"impl !Send for PopenConfig","synthetic":true,"types":[]},{"text":"impl !Send for Redirection","synthetic":true,"types":[]},{"text":"impl Send for PopenError","synthetic":true,"types":[]},{"text":"impl Send for ExitStatus","synthetic":true,"types":[]}];
implementors["subtle"] = [{"text":"impl Send for Choice","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CtOption&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl !Send for Underscore","synthetic":true,"types":[]},{"text":"impl !Send for Abstract","synthetic":true,"types":[]},{"text":"impl !Send for As","synthetic":true,"types":[]},{"text":"impl !Send for Async","synthetic":true,"types":[]},{"text":"impl !Send for Auto","synthetic":true,"types":[]},{"text":"impl !Send for Await","synthetic":true,"types":[]},{"text":"impl !Send for Become","synthetic":true,"types":[]},{"text":"impl !Send for Box","synthetic":true,"types":[]},{"text":"impl !Send for Break","synthetic":true,"types":[]},{"text":"impl !Send for Const","synthetic":true,"types":[]},{"text":"impl !Send for Continue","synthetic":true,"types":[]},{"text":"impl !Send for Crate","synthetic":true,"types":[]},{"text":"impl !Send for Default","synthetic":true,"types":[]},{"text":"impl !Send for Do","synthetic":true,"types":[]},{"text":"impl !Send for Dyn","synthetic":true,"types":[]},{"text":"impl !Send for Else","synthetic":true,"types":[]},{"text":"impl !Send for Enum","synthetic":true,"types":[]},{"text":"impl !Send for Extern","synthetic":true,"types":[]},{"text":"impl !Send for Final","synthetic":true,"types":[]},{"text":"impl !Send for Fn","synthetic":true,"types":[]},{"text":"impl !Send for For","synthetic":true,"types":[]},{"text":"impl !Send for If","synthetic":true,"types":[]},{"text":"impl !Send for Impl","synthetic":true,"types":[]},{"text":"impl !Send for In","synthetic":true,"types":[]},{"text":"impl !Send for Let","synthetic":true,"types":[]},{"text":"impl !Send for Loop","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for Match","synthetic":true,"types":[]},{"text":"impl !Send for Mod","synthetic":true,"types":[]},{"text":"impl !Send for Move","synthetic":true,"types":[]},{"text":"impl !Send for Mut","synthetic":true,"types":[]},{"text":"impl !Send for Override","synthetic":true,"types":[]},{"text":"impl !Send for Priv","synthetic":true,"types":[]},{"text":"impl !Send for Pub","synthetic":true,"types":[]},{"text":"impl !Send for Ref","synthetic":true,"types":[]},{"text":"impl !Send for Return","synthetic":true,"types":[]},{"text":"impl !Send for SelfType","synthetic":true,"types":[]},{"text":"impl !Send for SelfValue","synthetic":true,"types":[]},{"text":"impl !Send for Static","synthetic":true,"types":[]},{"text":"impl !Send for Struct","synthetic":true,"types":[]},{"text":"impl !Send for Super","synthetic":true,"types":[]},{"text":"impl !Send for Trait","synthetic":true,"types":[]},{"text":"impl !Send for Try","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for Typeof","synthetic":true,"types":[]},{"text":"impl !Send for Union","synthetic":true,"types":[]},{"text":"impl !Send for Unsafe","synthetic":true,"types":[]},{"text":"impl !Send for Unsized","synthetic":true,"types":[]},{"text":"impl !Send for Use","synthetic":true,"types":[]},{"text":"impl !Send for Virtual","synthetic":true,"types":[]},{"text":"impl !Send for Where","synthetic":true,"types":[]},{"text":"impl !Send for While","synthetic":true,"types":[]},{"text":"impl !Send for Yield","synthetic":true,"types":[]},{"text":"impl !Send for Add","synthetic":true,"types":[]},{"text":"impl !Send for AddEq","synthetic":true,"types":[]},{"text":"impl !Send for And","synthetic":true,"types":[]},{"text":"impl !Send for AndAnd","synthetic":true,"types":[]},{"text":"impl !Send for AndEq","synthetic":true,"types":[]},{"text":"impl !Send for At","synthetic":true,"types":[]},{"text":"impl !Send for Bang","synthetic":true,"types":[]},{"text":"impl !Send for Caret","synthetic":true,"types":[]},{"text":"impl !Send for CaretEq","synthetic":true,"types":[]},{"text":"impl !Send for Colon","synthetic":true,"types":[]},{"text":"impl !Send for Colon2","synthetic":true,"types":[]},{"text":"impl !Send for Comma","synthetic":true,"types":[]},{"text":"impl !Send for Div","synthetic":true,"types":[]},{"text":"impl !Send for DivEq","synthetic":true,"types":[]},{"text":"impl !Send for Dollar","synthetic":true,"types":[]},{"text":"impl !Send for Dot","synthetic":true,"types":[]},{"text":"impl !Send for Dot2","synthetic":true,"types":[]},{"text":"impl !Send for Dot3","synthetic":true,"types":[]},{"text":"impl !Send for DotDotEq","synthetic":true,"types":[]},{"text":"impl !Send for Eq","synthetic":true,"types":[]},{"text":"impl !Send for EqEq","synthetic":true,"types":[]},{"text":"impl !Send for Ge","synthetic":true,"types":[]},{"text":"impl !Send for Gt","synthetic":true,"types":[]},{"text":"impl !Send for Le","synthetic":true,"types":[]},{"text":"impl !Send for Lt","synthetic":true,"types":[]},{"text":"impl !Send for MulEq","synthetic":true,"types":[]},{"text":"impl !Send for Ne","synthetic":true,"types":[]},{"text":"impl !Send for Or","synthetic":true,"types":[]},{"text":"impl !Send for OrEq","synthetic":true,"types":[]},{"text":"impl !Send for OrOr","synthetic":true,"types":[]},{"text":"impl !Send for Pound","synthetic":true,"types":[]},{"text":"impl !Send for Question","synthetic":true,"types":[]},{"text":"impl !Send for RArrow","synthetic":true,"types":[]},{"text":"impl !Send for LArrow","synthetic":true,"types":[]},{"text":"impl !Send for Rem","synthetic":true,"types":[]},{"text":"impl !Send for RemEq","synthetic":true,"types":[]},{"text":"impl !Send for FatArrow","synthetic":true,"types":[]},{"text":"impl !Send for Semi","synthetic":true,"types":[]},{"text":"impl !Send for Shl","synthetic":true,"types":[]},{"text":"impl !Send for ShlEq","synthetic":true,"types":[]},{"text":"impl !Send for Shr","synthetic":true,"types":[]},{"text":"impl !Send for ShrEq","synthetic":true,"types":[]},{"text":"impl !Send for Star","synthetic":true,"types":[]},{"text":"impl !Send for Sub","synthetic":true,"types":[]},{"text":"impl !Send for SubEq","synthetic":true,"types":[]},{"text":"impl !Send for Tilde","synthetic":true,"types":[]},{"text":"impl !Send for Brace","synthetic":true,"types":[]},{"text":"impl !Send for Bracket","synthetic":true,"types":[]},{"text":"impl !Send for Paren","synthetic":true,"types":[]},{"text":"impl !Send for Group","synthetic":true,"types":[]},{"text":"impl !Send for Attribute","synthetic":true,"types":[]},{"text":"impl !Send for AttrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Meta","synthetic":true,"types":[]},{"text":"impl !Send for MetaList","synthetic":true,"types":[]},{"text":"impl !Send for MetaNameValue","synthetic":true,"types":[]},{"text":"impl !Send for NestedMeta","synthetic":true,"types":[]},{"text":"impl !Send for Variant","synthetic":true,"types":[]},{"text":"impl !Send for Fields","synthetic":true,"types":[]},{"text":"impl !Send for FieldsNamed","synthetic":true,"types":[]},{"text":"impl !Send for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl !Send for Field","synthetic":true,"types":[]},{"text":"impl !Send for Visibility","synthetic":true,"types":[]},{"text":"impl !Send for VisPublic","synthetic":true,"types":[]},{"text":"impl !Send for VisCrate","synthetic":true,"types":[]},{"text":"impl !Send for VisRestricted","synthetic":true,"types":[]},{"text":"impl !Send for Expr","synthetic":true,"types":[]},{"text":"impl !Send for ExprArray","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssign","synthetic":true,"types":[]},{"text":"impl !Send for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl !Send for ExprAsync","synthetic":true,"types":[]},{"text":"impl !Send for ExprAwait","synthetic":true,"types":[]},{"text":"impl !Send for ExprBinary","synthetic":true,"types":[]},{"text":"impl !Send for ExprBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprBox","synthetic":true,"types":[]},{"text":"impl !Send for ExprBreak","synthetic":true,"types":[]},{"text":"impl !Send for ExprCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprCast","synthetic":true,"types":[]},{"text":"impl !Send for ExprClosure","synthetic":true,"types":[]},{"text":"impl !Send for ExprContinue","synthetic":true,"types":[]},{"text":"impl !Send for ExprField","synthetic":true,"types":[]},{"text":"impl !Send for ExprForLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprGroup","synthetic":true,"types":[]},{"text":"impl !Send for ExprIf","synthetic":true,"types":[]},{"text":"impl !Send for ExprIndex","synthetic":true,"types":[]},{"text":"impl !Send for ExprLet","synthetic":true,"types":[]},{"text":"impl !Send for ExprLit","synthetic":true,"types":[]},{"text":"impl !Send for ExprLoop","synthetic":true,"types":[]},{"text":"impl !Send for ExprMacro","synthetic":true,"types":[]},{"text":"impl !Send for ExprMatch","synthetic":true,"types":[]},{"text":"impl !Send for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl !Send for ExprParen","synthetic":true,"types":[]},{"text":"impl !Send for ExprPath","synthetic":true,"types":[]},{"text":"impl !Send for ExprRange","synthetic":true,"types":[]},{"text":"impl !Send for ExprReference","synthetic":true,"types":[]},{"text":"impl !Send for ExprRepeat","synthetic":true,"types":[]},{"text":"impl !Send for ExprReturn","synthetic":true,"types":[]},{"text":"impl !Send for ExprStruct","synthetic":true,"types":[]},{"text":"impl !Send for ExprTry","synthetic":true,"types":[]},{"text":"impl !Send for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl !Send for ExprTuple","synthetic":true,"types":[]},{"text":"impl !Send for ExprType","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnary","synthetic":true,"types":[]},{"text":"impl !Send for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl !Send for ExprWhile","synthetic":true,"types":[]},{"text":"impl !Send for ExprYield","synthetic":true,"types":[]},{"text":"impl !Send for Member","synthetic":true,"types":[]},{"text":"impl !Send for Index","synthetic":true,"types":[]},{"text":"impl !Send for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl !Send for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl !Send for FieldValue","synthetic":true,"types":[]},{"text":"impl !Send for Label","synthetic":true,"types":[]},{"text":"impl !Send for Arm","synthetic":true,"types":[]},{"text":"impl !Send for RangeLimits","synthetic":true,"types":[]},{"text":"impl !Send for Generics","synthetic":true,"types":[]},{"text":"impl !Send for GenericParam","synthetic":true,"types":[]},{"text":"impl !Send for TypeParam","synthetic":true,"types":[]},{"text":"impl !Send for LifetimeDef","synthetic":true,"types":[]},{"text":"impl !Send for ConstParam","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl !Send for TypeParamBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBound","synthetic":true,"types":[]},{"text":"impl !Send for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl !Send for WhereClause","synthetic":true,"types":[]},{"text":"impl !Send for WherePredicate","synthetic":true,"types":[]},{"text":"impl !Send for PredicateType","synthetic":true,"types":[]},{"text":"impl !Send for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl !Send for PredicateEq","synthetic":true,"types":[]},{"text":"impl !Send for Item","synthetic":true,"types":[]},{"text":"impl !Send for ItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ItemEnum","synthetic":true,"types":[]},{"text":"impl !Send for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl !Send for ItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemImpl","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ItemMacro2","synthetic":true,"types":[]},{"text":"impl !Send for ItemMod","synthetic":true,"types":[]},{"text":"impl !Send for ItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ItemStruct","synthetic":true,"types":[]},{"text":"impl !Send for ItemTrait","synthetic":true,"types":[]},{"text":"impl !Send for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl !Send for ItemType","synthetic":true,"types":[]},{"text":"impl !Send for ItemUnion","synthetic":true,"types":[]},{"text":"impl !Send for ItemUse","synthetic":true,"types":[]},{"text":"impl !Send for UseTree","synthetic":true,"types":[]},{"text":"impl !Send for UsePath","synthetic":true,"types":[]},{"text":"impl !Send for UseName","synthetic":true,"types":[]},{"text":"impl !Send for UseRename","synthetic":true,"types":[]},{"text":"impl !Send for UseGlob","synthetic":true,"types":[]},{"text":"impl !Send for UseGroup","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItem","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemType","synthetic":true,"types":[]},{"text":"impl !Send for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for TraitItem","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemConst","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemType","synthetic":true,"types":[]},{"text":"impl !Send for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for ImplItem","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemConst","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemType","synthetic":true,"types":[]},{"text":"impl !Send for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl !Send for Signature","synthetic":true,"types":[]},{"text":"impl !Send for FnArg","synthetic":true,"types":[]},{"text":"impl !Send for Receiver","synthetic":true,"types":[]},{"text":"impl !Send for File","synthetic":true,"types":[]},{"text":"impl !Send for Lifetime","synthetic":true,"types":[]},{"text":"impl !Send for Lit","synthetic":true,"types":[]},{"text":"impl !Send for LitStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByteStr","synthetic":true,"types":[]},{"text":"impl !Send for LitByte","synthetic":true,"types":[]},{"text":"impl !Send for LitChar","synthetic":true,"types":[]},{"text":"impl !Send for LitInt","synthetic":true,"types":[]},{"text":"impl !Send for LitFloat","synthetic":true,"types":[]},{"text":"impl !Send for LitBool","synthetic":true,"types":[]},{"text":"impl Send for StrStyle","synthetic":true,"types":[]},{"text":"impl !Send for Macro","synthetic":true,"types":[]},{"text":"impl !Send for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl !Send for DeriveInput","synthetic":true,"types":[]},{"text":"impl !Send for Data","synthetic":true,"types":[]},{"text":"impl !Send for DataStruct","synthetic":true,"types":[]},{"text":"impl !Send for DataEnum","synthetic":true,"types":[]},{"text":"impl !Send for DataUnion","synthetic":true,"types":[]},{"text":"impl !Send for BinOp","synthetic":true,"types":[]},{"text":"impl !Send for UnOp","synthetic":true,"types":[]},{"text":"impl !Send for Block","synthetic":true,"types":[]},{"text":"impl !Send for Stmt","synthetic":true,"types":[]},{"text":"impl !Send for Local","synthetic":true,"types":[]},{"text":"impl !Send for Type","synthetic":true,"types":[]},{"text":"impl !Send for TypeArray","synthetic":true,"types":[]},{"text":"impl !Send for TypeBareFn","synthetic":true,"types":[]},{"text":"impl !Send for TypeGroup","synthetic":true,"types":[]},{"text":"impl !Send for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl !Send for TypeInfer","synthetic":true,"types":[]},{"text":"impl !Send for TypeMacro","synthetic":true,"types":[]},{"text":"impl !Send for TypeNever","synthetic":true,"types":[]},{"text":"impl !Send for TypeParen","synthetic":true,"types":[]},{"text":"impl !Send for TypePath","synthetic":true,"types":[]},{"text":"impl !Send for TypePtr","synthetic":true,"types":[]},{"text":"impl !Send for TypeReference","synthetic":true,"types":[]},{"text":"impl !Send for TypeSlice","synthetic":true,"types":[]},{"text":"impl !Send for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl !Send for TypeTuple","synthetic":true,"types":[]},{"text":"impl !Send for Abi","synthetic":true,"types":[]},{"text":"impl !Send for BareFnArg","synthetic":true,"types":[]},{"text":"impl !Send for Variadic","synthetic":true,"types":[]},{"text":"impl !Send for ReturnType","synthetic":true,"types":[]},{"text":"impl !Send for Pat","synthetic":true,"types":[]},{"text":"impl !Send for PatBox","synthetic":true,"types":[]},{"text":"impl !Send for PatIdent","synthetic":true,"types":[]},{"text":"impl !Send for PatLit","synthetic":true,"types":[]},{"text":"impl !Send for PatMacro","synthetic":true,"types":[]},{"text":"impl !Send for PatOr","synthetic":true,"types":[]},{"text":"impl !Send for PatPath","synthetic":true,"types":[]},{"text":"impl !Send for PatRange","synthetic":true,"types":[]},{"text":"impl !Send for PatReference","synthetic":true,"types":[]},{"text":"impl !Send for PatRest","synthetic":true,"types":[]},{"text":"impl !Send for PatSlice","synthetic":true,"types":[]},{"text":"impl !Send for PatStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatTuple","synthetic":true,"types":[]},{"text":"impl !Send for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl !Send for PatType","synthetic":true,"types":[]},{"text":"impl !Send for PatWild","synthetic":true,"types":[]},{"text":"impl !Send for FieldPat","synthetic":true,"types":[]},{"text":"impl !Send for Path","synthetic":true,"types":[]},{"text":"impl !Send for PathSegment","synthetic":true,"types":[]},{"text":"impl !Send for PathArguments","synthetic":true,"types":[]},{"text":"impl !Send for GenericArgument","synthetic":true,"types":[]},{"text":"impl !Send for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for Binding","synthetic":true,"types":[]},{"text":"impl !Send for Constraint","synthetic":true,"types":[]},{"text":"impl !Send for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl !Send for QSelf","synthetic":true,"types":[]},{"text":"impl !Send for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for Pairs&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Send for PairsMut&lt;'a, T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Send for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; !Send for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Nothing","synthetic":true,"types":[]}];
implementors["tar"] = [{"text":"impl&lt;R:&nbsp;?Sized&gt; Send for Archive&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for Entries&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Builder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; !Send for Entry&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Send for Unpacked","synthetic":true,"types":[]},{"text":"impl Send for EntryType","synthetic":true,"types":[]},{"text":"impl Send for Header","synthetic":true,"types":[]},{"text":"impl Send for HeaderMode","synthetic":true,"types":[]},{"text":"impl Send for OldHeader","synthetic":true,"types":[]},{"text":"impl Send for UstarHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuSparseHeader","synthetic":true,"types":[]},{"text":"impl Send for GnuExtSparseHeader","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; Send for PaxExtensions&lt;'entry&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'entry&gt; Send for PaxExtension&lt;'entry&gt;","synthetic":true,"types":[]}];
implementors["tempfile"] = [{"text":"impl Send for TempDir","synthetic":true,"types":[]},{"text":"impl Send for PathPersistError","synthetic":true,"types":[]},{"text":"impl Send for TempPath","synthetic":true,"types":[]},{"text":"impl Send for NamedTempFile","synthetic":true,"types":[]},{"text":"impl Send for PersistError","synthetic":true,"types":[]},{"text":"impl Send for SpooledTempFile","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for Builder&lt;'a, 'b&gt;","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Send for ColorChoice","synthetic":true,"types":[]},{"text":"impl Send for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl Send for BufferWriter","synthetic":true,"types":[]},{"text":"impl Send for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ColorSpec","synthetic":true,"types":[]},{"text":"impl Send for Color","synthetic":true,"types":[]},{"text":"impl Send for ParseColorError","synthetic":true,"types":[]}];
implementors["textwrap"] = [{"text":"impl Send for NoHyphenation","synthetic":true,"types":[]},{"text":"impl Send for HyphenSplitter","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for Wrapper&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; Send for IntoWrapIter&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, 'a, S&gt; Send for WrapIter&lt;'w, 'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; Send for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["time"] = [{"text":"impl Send for Duration","synthetic":true,"types":[]},{"text":"impl Send for OutOfRangeError","synthetic":true,"types":[]},{"text":"impl Send for Timespec","synthetic":true,"types":[]},{"text":"impl Send for PreciseTime","synthetic":true,"types":[]},{"text":"impl Send for SteadyTime","synthetic":true,"types":[]},{"text":"impl Send for Tm","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TmFmt&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["tinyvec"] = [{"text":"impl&lt;A&gt; Send for ArrayVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for ArrayVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for ArrayVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ArrayVecDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'s, T&gt; Send for SliceVec&lt;'s, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, 's, T&gt; Send for SliceVecDrain&lt;'p, 's, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A&gt; Send for TinyVecDrain&lt;'p, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'p, A, I&gt; Send for TinyVecSplice&lt;'p, A, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Send for TinyVecIterator&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;A as Array&gt;::Item: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tmc_client"] = [{"text":"impl Send for ClientError","synthetic":true,"types":[]},{"text":"impl Send for FeedbackAnswer","synthetic":true,"types":[]},{"text":"impl Send for User","synthetic":true,"types":[]},{"text":"impl Send for Organization","synthetic":true,"types":[]},{"text":"impl Send for Course","synthetic":true,"types":[]},{"text":"impl Send for CourseData","synthetic":true,"types":[]},{"text":"impl Send for CourseDetails","synthetic":true,"types":[]},{"text":"impl Send for Exercise","synthetic":true,"types":[]},{"text":"impl Send for CourseExercise","synthetic":true,"types":[]},{"text":"impl Send for CourseDataExercise","synthetic":true,"types":[]},{"text":"impl Send for CourseDataExercisePoint","synthetic":true,"types":[]},{"text":"impl Send for ExerciseDetails","synthetic":true,"types":[]},{"text":"impl Send for ExercisesDetails","synthetic":true,"types":[]},{"text":"impl Send for Submission","synthetic":true,"types":[]},{"text":"impl Send for NewSubmission","synthetic":true,"types":[]},{"text":"impl Send for SubmissionProcessingStatus","synthetic":true,"types":[]},{"text":"impl Send for SubmissionFinished","synthetic":true,"types":[]},{"text":"impl Send for SubmissionStatus","synthetic":true,"types":[]},{"text":"impl Send for SubmissionFeedbackResponse","synthetic":true,"types":[]},{"text":"impl Send for Review","synthetic":true,"types":[]},{"text":"impl Send for UpdateResult","synthetic":true,"types":[]},{"text":"impl Send for ClientUpdateData","synthetic":true,"types":[]},{"text":"impl Send for TmcClient","synthetic":true,"types":[]}];
implementors["tmc_langs_csharp"] = [{"text":"impl Send for CSharpError","synthetic":true,"types":[]},{"text":"impl Send for CSharpPlugin","synthetic":true,"types":[]},{"text":"impl Send for CSharpStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_framework"] = [{"text":"impl !Send for TmcCommand","synthetic":true,"types":[]},{"text":"impl Send for Output","synthetic":true,"types":[]},{"text":"impl Send for TestDesc","synthetic":true,"types":[]},{"text":"impl Send for TestResult","synthetic":true,"types":[]},{"text":"impl Send for ExerciseDesc","synthetic":true,"types":[]},{"text":"impl Send for RunResult","synthetic":true,"types":[]},{"text":"impl Send for RunStatus","synthetic":true,"types":[]},{"text":"impl Send for ExercisePackagingConfiguration","synthetic":true,"types":[]},{"text":"impl Send for StyleValidationStrategy","synthetic":true,"types":[]},{"text":"impl Send for StyleValidationError","synthetic":true,"types":[]},{"text":"impl Send for StyleValidationResult","synthetic":true,"types":[]},{"text":"impl Send for TmcError","synthetic":true,"types":[]},{"text":"impl Send for CommandError","synthetic":true,"types":[]},{"text":"impl Send for FileIo","synthetic":true,"types":[]},{"text":"impl Send for FileLock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FileLockGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for MetaString","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Send for MetaSyntaxParser&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NothingIsStudentFilePolicy","synthetic":true,"types":[]},{"text":"impl Send for EverythingIsStudentFilePolicy","synthetic":true,"types":[]},{"text":"impl Send for TmcProjectYml","synthetic":true,"types":[]},{"text":"impl Send for PythonVer","synthetic":true,"types":[]},{"text":"impl Send for NoTests","synthetic":true,"types":[]},{"text":"impl Send for NoTestsWrapper","synthetic":true,"types":[]},{"text":"impl Send for NoTestsPoints","synthetic":true,"types":[]},{"text":"impl Send for IntOrString","synthetic":true,"types":[]},{"text":"impl Send for Warning","synthetic":true,"types":[]}];
implementors["tmc_langs_java"] = [{"text":"impl !Send for AntPlugin","synthetic":true,"types":[]},{"text":"impl Send for AntStudentFilePolicy","synthetic":true,"types":[]},{"text":"impl Send for JavaError","synthetic":true,"types":[]},{"text":"impl !Send for MavenPlugin","synthetic":true,"types":[]},{"text":"impl Send for MavenStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_make"] = [{"text":"impl Send for MakeError","synthetic":true,"types":[]},{"text":"impl Send for MakePlugin","synthetic":true,"types":[]},{"text":"impl Send for MakeStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_notests"] = [{"text":"impl Send for NoTestsPlugin","synthetic":true,"types":[]},{"text":"impl Send for NoTestsStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_python3"] = [{"text":"impl Send for PythonError","synthetic":true,"types":[]},{"text":"impl Send for Python3Plugin","synthetic":true,"types":[]},{"text":"impl Send for Python3StudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_r"] = [{"text":"impl Send for RPlugin","synthetic":true,"types":[]},{"text":"impl Send for RStudentFilePolicy","synthetic":true,"types":[]}];
implementors["tmc_langs_util"] = [{"text":"impl Send for UtilError","synthetic":true,"types":[]},{"text":"impl Send for ParamError","synthetic":true,"types":[]},{"text":"impl Send for ProgressReporter2","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for StatusUpdate&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RefreshData","synthetic":true,"types":[]},{"text":"impl Send for RefreshExercise","synthetic":true,"types":[]},{"text":"impl Send for TmcParams","synthetic":true,"types":[]},{"text":"impl Send for OutputFormat","synthetic":true,"types":[]}];
implementors["tokio"] = [{"text":"impl&lt;'a&gt; Send for ReadBuf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Interest","synthetic":true,"types":[]},{"text":"impl Send for Ready","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for AsyncFd&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for AsyncFdReadyGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for AsyncFdReadyMutGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryIoError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;RW&gt; Send for BufStream&lt;RW&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;RW: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Lines&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DuplexStream","synthetic":true,"types":[]},{"text":"impl Send for Repeat","synthetic":true,"types":[]},{"text":"impl Send for Sink","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Split&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Take&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TcpListener","synthetic":true,"types":[]},{"text":"impl Send for TcpSocket","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for TcpStream","synthetic":true,"types":[]},{"text":"impl Send for UdpSocket","synthetic":true,"types":[]},{"text":"impl Send for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Send for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for ReadHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for WriteHalf&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedReadHalf","synthetic":true,"types":[]},{"text":"impl Send for OwnedWriteHalf","synthetic":true,"types":[]},{"text":"impl Send for ReuniteError","synthetic":true,"types":[]},{"text":"impl Send for SocketAddr","synthetic":true,"types":[]},{"text":"impl Send for UnixStream","synthetic":true,"types":[]},{"text":"impl Send for UCred","synthetic":true,"types":[]},{"text":"impl Send for JoinError","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for Handle","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EnterGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Runtime","synthetic":true,"types":[]},{"text":"impl Send for Barrier","synthetic":true,"types":[]},{"text":"impl Send for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Permit&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedSender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for UnboundedReceiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendTimeoutError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Send for MutexGuard&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for OwnedMutexGuard&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryLockError","synthetic":true,"types":[]},{"text":"impl Send for Notify","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl Send for TryRecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TryAcquireError","synthetic":true,"types":[]},{"text":"impl Send for AcquireError","synthetic":true,"types":[]},{"text":"impl Send for Semaphore","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SemaphorePermit&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedSemaphorePermit","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for RecvError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Receiver&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sender&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Ref&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for LocalSet","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Send for Sleep","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for Elapsed","synthetic":true,"types":[]},{"text":"impl Send for Instant","synthetic":true,"types":[]},{"text":"impl Send for Interval","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Timeout&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for ReadHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for WriteHalf&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for JoinHandle&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Sender&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for Receiver&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for Mutex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLock&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLockReadGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;?Sized&gt; Send for RwLockWriteGuard&lt;'_, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send + Sync,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["tokio_rustls"] = [{"text":"impl&lt;IO&gt; Send for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for TlsStream&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TlsConnector","synthetic":true,"types":[]},{"text":"impl Send for TlsAcceptor","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for Connect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for Accept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for FailableConnect&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;IO&gt; Send for FailableAccept&lt;IO&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;IO: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for TlsStream&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tokio_util"] = [{"text":"impl Send for BytesCodec","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for Framed&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Send for FramedParts&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, D&gt; Send for FramedRead&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, E&gt; Send for FramedWrite&lt;T, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Builder","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodecError","synthetic":true,"types":[]},{"text":"impl Send for LengthDelimitedCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodec","synthetic":true,"types":[]},{"text":"impl Send for LinesCodecError","synthetic":true,"types":[]},{"text":"impl Send for PollSemaphore","synthetic":true,"types":[]},{"text":"impl&lt;L, R&gt; Send for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for CancellationToken","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for WaitForCancellationFuture&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Send for ReusableBoxFuture&lt;T&gt;","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;K, V&gt; Send for Map&lt;K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Datetime","synthetic":true,"types":[]},{"text":"impl Send for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Send for Value","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Deserializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["tracing"] = [{"text":"impl&lt;T&gt; Send for WithDispatch&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Instrumented&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Span","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Entered&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Send for EnteredSpan","synthetic":true,"types":[]}];
implementors["tracing_core"] = [{"text":"impl Send for Identifier","synthetic":true,"types":[]},{"text":"impl Send for Dispatch","synthetic":true,"types":[]},{"text":"impl Send for DefaultGuard","synthetic":true,"types":[]},{"text":"impl Send for SetGlobalDefaultError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Event&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Field","synthetic":true,"types":[]},{"text":"impl Send for Empty","synthetic":true,"types":[]},{"text":"impl Send for FieldSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ValueSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Iter","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DisplayValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for DebugValue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Kind","synthetic":true,"types":[]},{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for LevelFilter","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelFilterError","synthetic":true,"types":[]},{"text":"impl Send for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Send for Id","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Attributes&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Current","synthetic":true,"types":[]},{"text":"impl Send for Interest","synthetic":true,"types":[]}];
implementors["try_lock"] = [{"text":"impl&lt;'a, T&gt; Send for Locked&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T:&nbsp;Send&gt; Send for TryLock&lt;T&gt;","synthetic":false,"types":[]}];
implementors["type_map"] = [{"text":"impl&lt;'a, T&gt; Send for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for TypeMap","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Send for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Send for TypeMap","synthetic":true,"types":[]}];
implementors["typenum"] = [{"text":"impl Send for B0","synthetic":true,"types":[]},{"text":"impl Send for B1","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U&gt; Send for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Z0","synthetic":true,"types":[]},{"text":"impl Send for UTerm","synthetic":true,"types":[]},{"text":"impl&lt;U, B&gt; Send for UInt&lt;U, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for ATerm","synthetic":true,"types":[]},{"text":"impl&lt;V, A&gt; Send for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Greater","synthetic":true,"types":[]},{"text":"impl Send for Less","synthetic":true,"types":[]},{"text":"impl Send for Equal","synthetic":true,"types":[]}];
implementors["unicase"] = [{"text":"impl&lt;S&gt; Send for UniCase&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Send for Ascii&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Send for Level","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for BidiClass","synthetic":true,"types":[]},{"text":"impl Send for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Send for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Send for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for IsNormalized","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for Replacements&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Send for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Send for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Mark","synthetic":true,"types":[]},{"text":"impl Send for EndOfInput","synthetic":true,"types":[]}];
implementors["uom"] = [{"text":"impl Send for yottameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for zettameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for exameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for petameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for terameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for gigameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for megameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for kilometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for hectometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for decameter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for meter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for decimeter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for centimeter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for millimeter_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for micrometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for nanometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for picometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for femtometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for attometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for zeptometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for yoctometer_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for foot_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for galileo","synthetic":true,"types":[]},{"text":"impl Send for inch_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for millimeter_per_minute_squared","synthetic":true,"types":[]},{"text":"impl Send for yottamole","synthetic":true,"types":[]},{"text":"impl Send for zettamole","synthetic":true,"types":[]},{"text":"impl Send for examole","synthetic":true,"types":[]},{"text":"impl Send for petamole","synthetic":true,"types":[]},{"text":"impl Send for teramole","synthetic":true,"types":[]},{"text":"impl Send for gigamole","synthetic":true,"types":[]},{"text":"impl Send for megamole","synthetic":true,"types":[]},{"text":"impl Send for kilomole","synthetic":true,"types":[]},{"text":"impl Send for hectomole","synthetic":true,"types":[]},{"text":"impl Send for decamole","synthetic":true,"types":[]},{"text":"impl Send for mole","synthetic":true,"types":[]},{"text":"impl Send for decimole","synthetic":true,"types":[]},{"text":"impl Send for centimole","synthetic":true,"types":[]},{"text":"impl Send for millimole","synthetic":true,"types":[]},{"text":"impl Send for micromole","synthetic":true,"types":[]},{"text":"impl Send for nanomole","synthetic":true,"types":[]},{"text":"impl Send for picomole","synthetic":true,"types":[]},{"text":"impl Send for femtomole","synthetic":true,"types":[]},{"text":"impl Send for attomole","synthetic":true,"types":[]},{"text":"impl Send for zeptomole","synthetic":true,"types":[]},{"text":"impl Send for yoctomole","synthetic":true,"types":[]},{"text":"impl Send for radian","synthetic":true,"types":[]},{"text":"impl Send for revolution","synthetic":true,"types":[]},{"text":"impl Send for degree","synthetic":true,"types":[]},{"text":"impl Send for gon","synthetic":true,"types":[]},{"text":"impl Send for mil","synthetic":true,"types":[]},{"text":"impl Send for minute","synthetic":true,"types":[]},{"text":"impl Send for second","synthetic":true,"types":[]},{"text":"impl Send for radian_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for degree_per_second_squared","synthetic":true,"types":[]},{"text":"impl Send for radian_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for degree_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for radian_per_second","synthetic":true,"types":[]},{"text":"impl Send for degree_per_second","synthetic":true,"types":[]},{"text":"impl Send for revolution_per_second","synthetic":true,"types":[]},{"text":"impl Send for revolution_per_minute","synthetic":true,"types":[]},{"text":"impl Send for revolution_per_hour","synthetic":true,"types":[]},{"text":"impl Send for square_yottameter","synthetic":true,"types":[]},{"text":"impl Send for square_zettameter","synthetic":true,"types":[]},{"text":"impl Send for square_exameter","synthetic":true,"types":[]},{"text":"impl Send for square_petameter","synthetic":true,"types":[]},{"text":"impl Send for square_terameter","synthetic":true,"types":[]},{"text":"impl Send for square_gigameter","synthetic":true,"types":[]},{"text":"impl Send for square_megameter","synthetic":true,"types":[]},{"text":"impl Send for square_kilometer","synthetic":true,"types":[]},{"text":"impl Send for square_hectometer","synthetic":true,"types":[]},{"text":"impl Send for square_decameter","synthetic":true,"types":[]},{"text":"impl Send for square_meter","synthetic":true,"types":[]},{"text":"impl Send for square_decimeter","synthetic":true,"types":[]},{"text":"impl Send for square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for square_micrometer","synthetic":true,"types":[]},{"text":"impl Send for square_nanometer","synthetic":true,"types":[]},{"text":"impl Send for square_picometer","synthetic":true,"types":[]},{"text":"impl Send for square_femtometer","synthetic":true,"types":[]},{"text":"impl Send for square_attometer","synthetic":true,"types":[]},{"text":"impl Send for square_zeptometer","synthetic":true,"types":[]},{"text":"impl Send for square_yoctometer","synthetic":true,"types":[]},{"text":"impl Send for acre","synthetic":true,"types":[]},{"text":"impl Send for are","synthetic":true,"types":[]},{"text":"impl Send for barn","synthetic":true,"types":[]},{"text":"impl Send for circular_mil","synthetic":true,"types":[]},{"text":"impl Send for hectare","synthetic":true,"types":[]},{"text":"impl Send for square_foot","synthetic":true,"types":[]},{"text":"impl Send for square_inch","synthetic":true,"types":[]},{"text":"impl Send for square_mile","synthetic":true,"types":[]},{"text":"impl Send for square_yard","synthetic":true,"types":[]},{"text":"impl Send for yottajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for zettajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for exajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for petajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for terajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for picojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for femtojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for attojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for zeptojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for yoctojoule_per_kilogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_zeptogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_attogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_femtogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_picogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_nanogram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_microgram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_milligram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_gram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_megagram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_gigagram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_teragram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_petagram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_exagram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_zettagram","synthetic":true,"types":[]},{"text":"impl Send for joule_per_yottagram","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_pound","synthetic":true,"types":[]},{"text":"impl Send for btu_per_pound","synthetic":true,"types":[]},{"text":"impl Send for calorie_it_per_gram","synthetic":true,"types":[]},{"text":"impl Send for calorie_per_gram","synthetic":true,"types":[]},{"text":"impl Send for yottafarad","synthetic":true,"types":[]},{"text":"impl Send for zettafarad","synthetic":true,"types":[]},{"text":"impl Send for exafarad","synthetic":true,"types":[]},{"text":"impl Send for petafarad","synthetic":true,"types":[]},{"text":"impl Send for terafarad","synthetic":true,"types":[]},{"text":"impl Send for gigafarad","synthetic":true,"types":[]},{"text":"impl Send for megafarad","synthetic":true,"types":[]},{"text":"impl Send for kilofarad","synthetic":true,"types":[]},{"text":"impl Send for hectofarad","synthetic":true,"types":[]},{"text":"impl Send for decafarad","synthetic":true,"types":[]},{"text":"impl Send for farad","synthetic":true,"types":[]},{"text":"impl Send for decifarad","synthetic":true,"types":[]},{"text":"impl Send for centifarad","synthetic":true,"types":[]},{"text":"impl Send for millifarad","synthetic":true,"types":[]},{"text":"impl Send for microfarad","synthetic":true,"types":[]},{"text":"impl Send for nanofarad","synthetic":true,"types":[]},{"text":"impl Send for picofarad","synthetic":true,"types":[]},{"text":"impl Send for femtofarad","synthetic":true,"types":[]},{"text":"impl Send for attofarad","synthetic":true,"types":[]},{"text":"impl Send for zeptofarad","synthetic":true,"types":[]},{"text":"impl Send for yoctofarad","synthetic":true,"types":[]},{"text":"impl Send for abfarad","synthetic":true,"types":[]},{"text":"impl Send for statfarad","synthetic":true,"types":[]},{"text":"impl Send for yottakatal","synthetic":true,"types":[]},{"text":"impl Send for zettakatal","synthetic":true,"types":[]},{"text":"impl Send for exakatal","synthetic":true,"types":[]},{"text":"impl Send for petakatal","synthetic":true,"types":[]},{"text":"impl Send for terakatal","synthetic":true,"types":[]},{"text":"impl Send for gigakatal","synthetic":true,"types":[]},{"text":"impl Send for megakatal","synthetic":true,"types":[]},{"text":"impl Send for kilokatal","synthetic":true,"types":[]},{"text":"impl Send for hectokatal","synthetic":true,"types":[]},{"text":"impl Send for decakatal","synthetic":true,"types":[]},{"text":"impl Send for katal","synthetic":true,"types":[]},{"text":"impl Send for decikatal","synthetic":true,"types":[]},{"text":"impl Send for centikatal","synthetic":true,"types":[]},{"text":"impl Send for millikatal","synthetic":true,"types":[]},{"text":"impl Send for microkatal","synthetic":true,"types":[]},{"text":"impl Send for nanokatal","synthetic":true,"types":[]},{"text":"impl Send for picokatal","synthetic":true,"types":[]},{"text":"impl Send for femtokatal","synthetic":true,"types":[]},{"text":"impl Send for attokatal","synthetic":true,"types":[]},{"text":"impl Send for zeptokatal","synthetic":true,"types":[]},{"text":"impl Send for yoctokatal","synthetic":true,"types":[]},{"text":"impl Send for yotta_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for zetta_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for exa_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for peta_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for tera_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for giga_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for mega_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for kilo_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for hecto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for deca_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for deci_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for centi_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for milli_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for micro_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for nano_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for pico_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for femto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for atto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for zepto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for yocto_enzyme_unit","synthetic":true,"types":[]},{"text":"impl Send for yottakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zettakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for exakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for petakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for terakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for gigakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for megakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hectokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decakatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for katal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decikatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for centikatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for millikatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for microkatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for nanokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for picokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for femtokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for attokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctokatal_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for kilokatal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for katal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for katal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for millikatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for millikatal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for microkatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for microkatal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for nanokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for nanokatal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for picokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for picokatal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for femtokatal_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for femtokatal_per_liter","synthetic":true,"types":[]},{"text":"impl Send for kilokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for katal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for millikatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for microkatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for nanokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for picokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for femtokatal_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for kilokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for katal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for millikatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for microkatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for nanokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for picokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for femtokatal_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for yotta_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zetta_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for exa_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for peta_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for tera_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for giga_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for mega_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilo_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hecto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for deca_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for deci_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for centi_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for milli_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for micro_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for nano_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for pico_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for femto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for atto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zepto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for yocto_enzyme_unit_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilo_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for kilo_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for milli_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for milli_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for micro_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for micro_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for nano_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for nano_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for pico_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for pico_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for femto_enzyme_unit_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for femto_enzyme_unit_per_liter","synthetic":true,"types":[]},{"text":"impl Send for kilo_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for milli_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for micro_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for nano_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for pico_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for femto_enzyme_unit_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for kilo_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for milli_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for micro_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for nano_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for pico_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for femto_enzyme_unit_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for radian_per_meter","synthetic":true,"types":[]},{"text":"impl Send for degree_per_meter","synthetic":true,"types":[]},{"text":"impl Send for radian_per_millimeter","synthetic":true,"types":[]},{"text":"impl Send for degree_per_millimeter","synthetic":true,"types":[]},{"text":"impl Send for yottacoulomb","synthetic":true,"types":[]},{"text":"impl Send for zettacoulomb","synthetic":true,"types":[]},{"text":"impl Send for exacoulomb","synthetic":true,"types":[]},{"text":"impl Send for petacoulomb","synthetic":true,"types":[]},{"text":"impl Send for teracoulomb","synthetic":true,"types":[]},{"text":"impl Send for gigacoulomb","synthetic":true,"types":[]},{"text":"impl Send for megacoulomb","synthetic":true,"types":[]},{"text":"impl Send for kilocoulomb","synthetic":true,"types":[]},{"text":"impl Send for hectocoulomb","synthetic":true,"types":[]},{"text":"impl Send for decacoulomb","synthetic":true,"types":[]},{"text":"impl Send for coulomb","synthetic":true,"types":[]},{"text":"impl Send for decicoulomb","synthetic":true,"types":[]},{"text":"impl Send for centicoulomb","synthetic":true,"types":[]},{"text":"impl Send for millicoulomb","synthetic":true,"types":[]},{"text":"impl Send for microcoulomb","synthetic":true,"types":[]},{"text":"impl Send for nanocoulomb","synthetic":true,"types":[]},{"text":"impl Send for picocoulomb","synthetic":true,"types":[]},{"text":"impl Send for femtocoulomb","synthetic":true,"types":[]},{"text":"impl Send for attocoulomb","synthetic":true,"types":[]},{"text":"impl Send for zeptocoulomb","synthetic":true,"types":[]},{"text":"impl Send for yoctocoulomb","synthetic":true,"types":[]},{"text":"impl Send for petaampere_hour","synthetic":true,"types":[]},{"text":"impl Send for teraampere_hour","synthetic":true,"types":[]},{"text":"impl Send for gigaampere_hour","synthetic":true,"types":[]},{"text":"impl Send for megaampere_hour","synthetic":true,"types":[]},{"text":"impl Send for kiloampere_hour","synthetic":true,"types":[]},{"text":"impl Send for hectoampere_hour","synthetic":true,"types":[]},{"text":"impl Send for decaampere_hour","synthetic":true,"types":[]},{"text":"impl Send for ampere_hour","synthetic":true,"types":[]},{"text":"impl Send for milliampere_hour","synthetic":true,"types":[]},{"text":"impl Send for microampere_hour","synthetic":true,"types":[]},{"text":"impl Send for abcoulomb","synthetic":true,"types":[]},{"text":"impl Send for faraday","synthetic":true,"types":[]},{"text":"impl Send for franklin","synthetic":true,"types":[]},{"text":"impl Send for statcoulomb","synthetic":true,"types":[]},{"text":"impl Send for yottaampere","synthetic":true,"types":[]},{"text":"impl Send for zettaampere","synthetic":true,"types":[]},{"text":"impl Send for exaampere","synthetic":true,"types":[]},{"text":"impl Send for petaampere","synthetic":true,"types":[]},{"text":"impl Send for teraampere","synthetic":true,"types":[]},{"text":"impl Send for gigaampere","synthetic":true,"types":[]},{"text":"impl Send for megaampere","synthetic":true,"types":[]},{"text":"impl Send for kiloampere","synthetic":true,"types":[]},{"text":"impl Send for hectoampere","synthetic":true,"types":[]},{"text":"impl Send for decaampere","synthetic":true,"types":[]},{"text":"impl Send for ampere","synthetic":true,"types":[]},{"text":"impl Send for deciampere","synthetic":true,"types":[]},{"text":"impl Send for centiampere","synthetic":true,"types":[]},{"text":"impl Send for milliampere","synthetic":true,"types":[]},{"text":"impl Send for microampere","synthetic":true,"types":[]},{"text":"impl Send for nanoampere","synthetic":true,"types":[]},{"text":"impl Send for picoampere","synthetic":true,"types":[]},{"text":"impl Send for femtoampere","synthetic":true,"types":[]},{"text":"impl Send for attoampere","synthetic":true,"types":[]},{"text":"impl Send for zeptoampere","synthetic":true,"types":[]},{"text":"impl Send for yoctoampere","synthetic":true,"types":[]},{"text":"impl Send for abampere","synthetic":true,"types":[]},{"text":"impl Send for gilbert","synthetic":true,"types":[]},{"text":"impl Send for statampere","synthetic":true,"types":[]},{"text":"impl Send for yottavolt","synthetic":true,"types":[]},{"text":"impl Send for zettavolt","synthetic":true,"types":[]},{"text":"impl Send for exavolt","synthetic":true,"types":[]},{"text":"impl Send for petavolt","synthetic":true,"types":[]},{"text":"impl Send for teravolt","synthetic":true,"types":[]},{"text":"impl Send for gigavolt","synthetic":true,"types":[]},{"text":"impl Send for megavolt","synthetic":true,"types":[]},{"text":"impl Send for kilovolt","synthetic":true,"types":[]},{"text":"impl Send for hectovolt","synthetic":true,"types":[]},{"text":"impl Send for decavolt","synthetic":true,"types":[]},{"text":"impl Send for volt","synthetic":true,"types":[]},{"text":"impl Send for decivolt","synthetic":true,"types":[]},{"text":"impl Send for centivolt","synthetic":true,"types":[]},{"text":"impl Send for millivolt","synthetic":true,"types":[]},{"text":"impl Send for microvolt","synthetic":true,"types":[]},{"text":"impl Send for nanovolt","synthetic":true,"types":[]},{"text":"impl Send for picovolt","synthetic":true,"types":[]},{"text":"impl Send for femtovolt","synthetic":true,"types":[]},{"text":"impl Send for attovolt","synthetic":true,"types":[]},{"text":"impl Send for zeptovolt","synthetic":true,"types":[]},{"text":"impl Send for yoctovolt","synthetic":true,"types":[]},{"text":"impl Send for abvolt","synthetic":true,"types":[]},{"text":"impl Send for statvolt","synthetic":true,"types":[]},{"text":"impl Send for yottasiemens","synthetic":true,"types":[]},{"text":"impl Send for zettasiemens","synthetic":true,"types":[]},{"text":"impl Send for exasiemens","synthetic":true,"types":[]},{"text":"impl Send for petasiemens","synthetic":true,"types":[]},{"text":"impl Send for terasiemens","synthetic":true,"types":[]},{"text":"impl Send for gigasiemens","synthetic":true,"types":[]},{"text":"impl Send for megasiemens","synthetic":true,"types":[]},{"text":"impl Send for kilosiemens","synthetic":true,"types":[]},{"text":"impl Send for hectosiemens","synthetic":true,"types":[]},{"text":"impl Send for decasiemens","synthetic":true,"types":[]},{"text":"impl Send for siemens","synthetic":true,"types":[]},{"text":"impl Send for mho","synthetic":true,"types":[]},{"text":"impl Send for decisiemens","synthetic":true,"types":[]},{"text":"impl Send for centisiemens","synthetic":true,"types":[]},{"text":"impl Send for millisiemens","synthetic":true,"types":[]},{"text":"impl Send for microsiemens","synthetic":true,"types":[]},{"text":"impl Send for nanosiemens","synthetic":true,"types":[]},{"text":"impl Send for picosiemens","synthetic":true,"types":[]},{"text":"impl Send for femtosiemens","synthetic":true,"types":[]},{"text":"impl Send for attosiemens","synthetic":true,"types":[]},{"text":"impl Send for zeptosiemens","synthetic":true,"types":[]},{"text":"impl Send for yoctosiemens","synthetic":true,"types":[]},{"text":"impl Send for abmho","synthetic":true,"types":[]},{"text":"impl Send for absiemens","synthetic":true,"types":[]},{"text":"impl Send for statsiemens","synthetic":true,"types":[]},{"text":"impl Send for statmho","synthetic":true,"types":[]},{"text":"impl Send for yottaohm","synthetic":true,"types":[]},{"text":"impl Send for zettaohm","synthetic":true,"types":[]},{"text":"impl Send for exaohm","synthetic":true,"types":[]},{"text":"impl Send for petaohm","synthetic":true,"types":[]},{"text":"impl Send for teraohm","synthetic":true,"types":[]},{"text":"impl Send for gigaohm","synthetic":true,"types":[]},{"text":"impl Send for megaohm","synthetic":true,"types":[]},{"text":"impl Send for kiloohm","synthetic":true,"types":[]},{"text":"impl Send for hectoohm","synthetic":true,"types":[]},{"text":"impl Send for decaohm","synthetic":true,"types":[]},{"text":"impl Send for ohm","synthetic":true,"types":[]},{"text":"impl Send for deciohm","synthetic":true,"types":[]},{"text":"impl Send for centiohm","synthetic":true,"types":[]},{"text":"impl Send for milliohm","synthetic":true,"types":[]},{"text":"impl Send for microohm","synthetic":true,"types":[]},{"text":"impl Send for nanoohm","synthetic":true,"types":[]},{"text":"impl Send for picoohm","synthetic":true,"types":[]},{"text":"impl Send for femtoohm","synthetic":true,"types":[]},{"text":"impl Send for attoohm","synthetic":true,"types":[]},{"text":"impl Send for zeptoohm","synthetic":true,"types":[]},{"text":"impl Send for yoctoohm","synthetic":true,"types":[]},{"text":"impl Send for abohm","synthetic":true,"types":[]},{"text":"impl Send for statohm","synthetic":true,"types":[]},{"text":"impl Send for yottajoule","synthetic":true,"types":[]},{"text":"impl Send for zettajoule","synthetic":true,"types":[]},{"text":"impl Send for exajoule","synthetic":true,"types":[]},{"text":"impl Send for petajoule","synthetic":true,"types":[]},{"text":"impl Send for terajoule","synthetic":true,"types":[]},{"text":"impl Send for gigajoule","synthetic":true,"types":[]},{"text":"impl Send for megajoule","synthetic":true,"types":[]},{"text":"impl Send for kilojoule","synthetic":true,"types":[]},{"text":"impl Send for hectojoule","synthetic":true,"types":[]},{"text":"impl Send for decajoule","synthetic":true,"types":[]},{"text":"impl Send for joule","synthetic":true,"types":[]},{"text":"impl Send for decijoule","synthetic":true,"types":[]},{"text":"impl Send for centijoule","synthetic":true,"types":[]},{"text":"impl Send for millijoule","synthetic":true,"types":[]},{"text":"impl Send for microjoule","synthetic":true,"types":[]},{"text":"impl Send for nanojoule","synthetic":true,"types":[]},{"text":"impl Send for picojoule","synthetic":true,"types":[]},{"text":"impl Send for femtojoule","synthetic":true,"types":[]},{"text":"impl Send for attojoule","synthetic":true,"types":[]},{"text":"impl Send for zeptojoule","synthetic":true,"types":[]},{"text":"impl Send for yoctojoule","synthetic":true,"types":[]},{"text":"impl Send for petawatt_hour","synthetic":true,"types":[]},{"text":"impl Send for terawatt_hour","synthetic":true,"types":[]},{"text":"impl Send for gigawatt_hour","synthetic":true,"types":[]},{"text":"impl Send for megawatt_hour","synthetic":true,"types":[]},{"text":"impl Send for kilowatt_hour","synthetic":true,"types":[]},{"text":"impl Send for hectowatt_hour","synthetic":true,"types":[]},{"text":"impl Send for decawatt_hour","synthetic":true,"types":[]},{"text":"impl Send for watt_hour","synthetic":true,"types":[]},{"text":"impl Send for milliwatt_hour","synthetic":true,"types":[]},{"text":"impl Send for microwatt_hour","synthetic":true,"types":[]},{"text":"impl Send for petaelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for teraelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for gigaelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for megaelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for kiloelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for hectoelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for decaelectronvolt","synthetic":true,"types":[]},{"text":"impl Send for electronvolt","synthetic":true,"types":[]},{"text":"impl Send for btu_it","synthetic":true,"types":[]},{"text":"impl Send for btu","synthetic":true,"types":[]},{"text":"impl Send for btu_39","synthetic":true,"types":[]},{"text":"impl Send for btu_59","synthetic":true,"types":[]},{"text":"impl Send for btu_60","synthetic":true,"types":[]},{"text":"impl Send for calorie_it","synthetic":true,"types":[]},{"text":"impl Send for calorie","synthetic":true,"types":[]},{"text":"impl Send for calorie_15","synthetic":true,"types":[]},{"text":"impl Send for calorie_20","synthetic":true,"types":[]},{"text":"impl Send for calorie_it_nutrition","synthetic":true,"types":[]},{"text":"impl Send for calorie_nutrition","synthetic":true,"types":[]},{"text":"impl Send for erg","synthetic":true,"types":[]},{"text":"impl Send for foot_poundal","synthetic":true,"types":[]},{"text":"impl Send for foot_pound","synthetic":true,"types":[]},{"text":"impl Send for kilocalorie_it","synthetic":true,"types":[]},{"text":"impl Send for kilocalorie","synthetic":true,"types":[]},{"text":"impl Send for quad","synthetic":true,"types":[]},{"text":"impl Send for therm_ec","synthetic":true,"types":[]},{"text":"impl Send for therm_us","synthetic":true,"types":[]},{"text":"impl Send for ton_tnt","synthetic":true,"types":[]},{"text":"impl Send for watt_second","synthetic":true,"types":[]},{"text":"impl Send for yottanewton","synthetic":true,"types":[]},{"text":"impl Send for zettanewton","synthetic":true,"types":[]},{"text":"impl Send for exanewton","synthetic":true,"types":[]},{"text":"impl Send for petanewton","synthetic":true,"types":[]},{"text":"impl Send for teranewton","synthetic":true,"types":[]},{"text":"impl Send for giganewton","synthetic":true,"types":[]},{"text":"impl Send for meganewton","synthetic":true,"types":[]},{"text":"impl Send for kilonewton","synthetic":true,"types":[]},{"text":"impl Send for hectonewton","synthetic":true,"types":[]},{"text":"impl Send for decanewton","synthetic":true,"types":[]},{"text":"impl Send for newton","synthetic":true,"types":[]},{"text":"impl Send for decinewton","synthetic":true,"types":[]},{"text":"impl Send for centinewton","synthetic":true,"types":[]},{"text":"impl Send for millinewton","synthetic":true,"types":[]},{"text":"impl Send for micronewton","synthetic":true,"types":[]},{"text":"impl Send for nanonewton","synthetic":true,"types":[]},{"text":"impl Send for piconewton","synthetic":true,"types":[]},{"text":"impl Send for femtonewton","synthetic":true,"types":[]},{"text":"impl Send for attonewton","synthetic":true,"types":[]},{"text":"impl Send for zeptonewton","synthetic":true,"types":[]},{"text":"impl Send for yoctonewton","synthetic":true,"types":[]},{"text":"impl Send for dyne","synthetic":true,"types":[]},{"text":"impl Send for kilogram_force","synthetic":true,"types":[]},{"text":"impl Send for kip","synthetic":true,"types":[]},{"text":"impl Send for ounce_force","synthetic":true,"types":[]},{"text":"impl Send for poundal","synthetic":true,"types":[]},{"text":"impl Send for pound_force","synthetic":true,"types":[]},{"text":"impl Send for ton_force","synthetic":true,"types":[]},{"text":"impl Send for yottahertz","synthetic":true,"types":[]},{"text":"impl Send for zettahertz","synthetic":true,"types":[]},{"text":"impl Send for exahertz","synthetic":true,"types":[]},{"text":"impl Send for petahertz","synthetic":true,"types":[]},{"text":"impl Send for terahertz","synthetic":true,"types":[]},{"text":"impl Send for gigahertz","synthetic":true,"types":[]},{"text":"impl Send for megahertz","synthetic":true,"types":[]},{"text":"impl Send for kilohertz","synthetic":true,"types":[]},{"text":"impl Send for hectohertz","synthetic":true,"types":[]},{"text":"impl Send for decahertz","synthetic":true,"types":[]},{"text":"impl Send for hertz","synthetic":true,"types":[]},{"text":"impl Send for decihertz","synthetic":true,"types":[]},{"text":"impl Send for centihertz","synthetic":true,"types":[]},{"text":"impl Send for millihertz","synthetic":true,"types":[]},{"text":"impl Send for microhertz","synthetic":true,"types":[]},{"text":"impl Send for nanohertz","synthetic":true,"types":[]},{"text":"impl Send for picohertz","synthetic":true,"types":[]},{"text":"impl Send for femtohertz","synthetic":true,"types":[]},{"text":"impl Send for attohertz","synthetic":true,"types":[]},{"text":"impl Send for zeptohertz","synthetic":true,"types":[]},{"text":"impl Send for yoctohertz","synthetic":true,"types":[]},{"text":"impl Send for cycle_per_day","synthetic":true,"types":[]},{"text":"impl Send for cycle_per_hour","synthetic":true,"types":[]},{"text":"impl Send for cycle_per_minute","synthetic":true,"types":[]},{"text":"impl Send for cycle_per_shake","synthetic":true,"types":[]},{"text":"impl Send for cycle_per_year","synthetic":true,"types":[]},{"text":"impl Send for yottagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for teragram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decagram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decigram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centigram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for milligram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microgram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yottajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for terajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for joule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctojoule_per_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for joule_per_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for btu_per_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for yottawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for zettawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for exawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for petawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for terawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for gigawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for megawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for kilowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for hectowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for decawatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for watt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for deciwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for centiwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for milliwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for microwatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for nanowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for picowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for femtowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for attowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctowatt_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for yottagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for teragram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decagram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decigram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centigram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_second_cubed_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for yottawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for terawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decawatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for watt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for deciwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centiwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for milliwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microwatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctowatt_per_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for watt_per_square_kilometer_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for watt_per_square_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for watt_per_square_centimeter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for watt_per_square_millimeter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for joule_per_second_square_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for joule_per_second_square_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_hour_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_hour_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_minute_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_minute_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_second_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_second_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_hour_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_hour_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_minute_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_minute_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_second_square_foot_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_second_square_inch_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for yottahenry","synthetic":true,"types":[]},{"text":"impl Send for zettahenry","synthetic":true,"types":[]},{"text":"impl Send for exahenry","synthetic":true,"types":[]},{"text":"impl Send for petahenry","synthetic":true,"types":[]},{"text":"impl Send for terahenry","synthetic":true,"types":[]},{"text":"impl Send for gigahenry","synthetic":true,"types":[]},{"text":"impl Send for megahenry","synthetic":true,"types":[]},{"text":"impl Send for kilohenry","synthetic":true,"types":[]},{"text":"impl Send for hectohenry","synthetic":true,"types":[]},{"text":"impl Send for decahenry","synthetic":true,"types":[]},{"text":"impl Send for henry","synthetic":true,"types":[]},{"text":"impl Send for decihenry","synthetic":true,"types":[]},{"text":"impl Send for centihenry","synthetic":true,"types":[]},{"text":"impl Send for millihenry","synthetic":true,"types":[]},{"text":"impl Send for microhenry","synthetic":true,"types":[]},{"text":"impl Send for nanohenry","synthetic":true,"types":[]},{"text":"impl Send for picohenry","synthetic":true,"types":[]},{"text":"impl Send for femtohenry","synthetic":true,"types":[]},{"text":"impl Send for attohenry","synthetic":true,"types":[]},{"text":"impl Send for zeptohenry","synthetic":true,"types":[]},{"text":"impl Send for yoctohenry","synthetic":true,"types":[]},{"text":"impl Send for abhenry","synthetic":true,"types":[]},{"text":"impl Send for stathenry","synthetic":true,"types":[]},{"text":"impl Send for yobibit","synthetic":true,"types":[]},{"text":"impl Send for yottabit","synthetic":true,"types":[]},{"text":"impl Send for zebibit","synthetic":true,"types":[]},{"text":"impl Send for zettabit","synthetic":true,"types":[]},{"text":"impl Send for exbibit","synthetic":true,"types":[]},{"text":"impl Send for exabit","synthetic":true,"types":[]},{"text":"impl Send for pebibit","synthetic":true,"types":[]},{"text":"impl Send for petabit","synthetic":true,"types":[]},{"text":"impl Send for tebibit","synthetic":true,"types":[]},{"text":"impl Send for terabit","synthetic":true,"types":[]},{"text":"impl Send for gibibit","synthetic":true,"types":[]},{"text":"impl Send for gigabit","synthetic":true,"types":[]},{"text":"impl Send for mebibit","synthetic":true,"types":[]},{"text":"impl Send for megabit","synthetic":true,"types":[]},{"text":"impl Send for kibibit","synthetic":true,"types":[]},{"text":"impl Send for kilobit","synthetic":true,"types":[]},{"text":"impl Send for bit","synthetic":true,"types":[]},{"text":"impl Send for yobibyte","synthetic":true,"types":[]},{"text":"impl Send for yottabyte","synthetic":true,"types":[]},{"text":"impl Send for zebibyte","synthetic":true,"types":[]},{"text":"impl Send for zettabyte","synthetic":true,"types":[]},{"text":"impl Send for exbibyte","synthetic":true,"types":[]},{"text":"impl Send for exabyte","synthetic":true,"types":[]},{"text":"impl Send for pebibyte","synthetic":true,"types":[]},{"text":"impl Send for petabyte","synthetic":true,"types":[]},{"text":"impl Send for tebibyte","synthetic":true,"types":[]},{"text":"impl Send for terabyte","synthetic":true,"types":[]},{"text":"impl Send for gibibyte","synthetic":true,"types":[]},{"text":"impl Send for gigabyte","synthetic":true,"types":[]},{"text":"impl Send for mebibyte","synthetic":true,"types":[]},{"text":"impl Send for megabyte","synthetic":true,"types":[]},{"text":"impl Send for kibibyte","synthetic":true,"types":[]},{"text":"impl Send for kilobyte","synthetic":true,"types":[]},{"text":"impl Send for byte","synthetic":true,"types":[]},{"text":"impl Send for octet","synthetic":true,"types":[]},{"text":"impl Send for nibble","synthetic":true,"types":[]},{"text":"impl Send for crumb","synthetic":true,"types":[]},{"text":"impl Send for shannon","synthetic":true,"types":[]},{"text":"impl Send for natural_unit_of_information","synthetic":true,"types":[]},{"text":"impl Send for trit","synthetic":true,"types":[]},{"text":"impl Send for hartley","synthetic":true,"types":[]},{"text":"impl Send for deciban","synthetic":true,"types":[]},{"text":"impl Send for yobibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for yottabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for zebibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for zettabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for exbibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for exabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for pebibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for petabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for tebibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for terabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for gibibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for gigabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for mebibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for megabit_per_second","synthetic":true,"types":[]},{"text":"impl Send for kibibit_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilobit_per_second","synthetic":true,"types":[]},{"text":"impl Send for bit_per_second","synthetic":true,"types":[]},{"text":"impl Send for yobibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for yottabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for zebibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for zettabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for exbibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for exabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for pebibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for petabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for tebibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for terabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for gibibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for gigabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for mebibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for megabyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for kibibyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilobyte_per_second","synthetic":true,"types":[]},{"text":"impl Send for byte_per_second","synthetic":true,"types":[]},{"text":"impl Send for octet_per_second","synthetic":true,"types":[]},{"text":"impl Send for yottameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for zettameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for exameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for petameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for terameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for gigameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for megameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for kilometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for hectometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for decameter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for meter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for decimeter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for centimeter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for millimeter_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for micrometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for nanometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for picometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for femtometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for attometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for zeptometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for yoctometer_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for foot_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for inch_per_second_cubed","synthetic":true,"types":[]},{"text":"impl Send for kilometer_per_minute_cubed","synthetic":true,"types":[]},{"text":"impl Send for yottameter","synthetic":true,"types":[]},{"text":"impl Send for zettameter","synthetic":true,"types":[]},{"text":"impl Send for exameter","synthetic":true,"types":[]},{"text":"impl Send for petameter","synthetic":true,"types":[]},{"text":"impl Send for terameter","synthetic":true,"types":[]},{"text":"impl Send for gigameter","synthetic":true,"types":[]},{"text":"impl Send for megameter","synthetic":true,"types":[]},{"text":"impl Send for kilometer","synthetic":true,"types":[]},{"text":"impl Send for hectometer","synthetic":true,"types":[]},{"text":"impl Send for decameter","synthetic":true,"types":[]},{"text":"impl Send for meter","synthetic":true,"types":[]},{"text":"impl Send for decimeter","synthetic":true,"types":[]},{"text":"impl Send for centimeter","synthetic":true,"types":[]},{"text":"impl Send for millimeter","synthetic":true,"types":[]},{"text":"impl Send for micrometer","synthetic":true,"types":[]},{"text":"impl Send for nanometer","synthetic":true,"types":[]},{"text":"impl Send for picometer","synthetic":true,"types":[]},{"text":"impl Send for femtometer","synthetic":true,"types":[]},{"text":"impl Send for attometer","synthetic":true,"types":[]},{"text":"impl Send for zeptometer","synthetic":true,"types":[]},{"text":"impl Send for yoctometer","synthetic":true,"types":[]},{"text":"impl Send for angstrom","synthetic":true,"types":[]},{"text":"impl Send for astronomical_unit","synthetic":true,"types":[]},{"text":"impl Send for chain","synthetic":true,"types":[]},{"text":"impl Send for fathom","synthetic":true,"types":[]},{"text":"impl Send for fermi","synthetic":true,"types":[]},{"text":"impl Send for foot","synthetic":true,"types":[]},{"text":"impl Send for foot_survey","synthetic":true,"types":[]},{"text":"impl Send for inch","synthetic":true,"types":[]},{"text":"impl Send for light_year","synthetic":true,"types":[]},{"text":"impl Send for microinch","synthetic":true,"types":[]},{"text":"impl Send for micron","synthetic":true,"types":[]},{"text":"impl Send for mil","synthetic":true,"types":[]},{"text":"impl Send for mile","synthetic":true,"types":[]},{"text":"impl Send for mile_survey","synthetic":true,"types":[]},{"text":"impl Send for nautical_mile","synthetic":true,"types":[]},{"text":"impl Send for parsec","synthetic":true,"types":[]},{"text":"impl Send for pica_computer","synthetic":true,"types":[]},{"text":"impl Send for pica_printers","synthetic":true,"types":[]},{"text":"impl Send for point_computer","synthetic":true,"types":[]},{"text":"impl Send for point_printers","synthetic":true,"types":[]},{"text":"impl Send for rod","synthetic":true,"types":[]},{"text":"impl Send for yard","synthetic":true,"types":[]},{"text":"impl Send for yottacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for zettacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for exacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for petacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for teracandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for gigacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for megacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for kilocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for hectocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for decacandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for decicandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for centicandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for millicandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for microcandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for nanocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for picocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for femtocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for attocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctocandela_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_picometer","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_nanometer","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_micrometer","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_kilometer","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_megameter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_gigameter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_terameter","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_inch","synthetic":true,"types":[]},{"text":"impl Send for candela_per_square_foot","synthetic":true,"types":[]},{"text":"impl Send for footlambert","synthetic":true,"types":[]},{"text":"impl Send for lambert","synthetic":true,"types":[]},{"text":"impl Send for stilb","synthetic":true,"types":[]},{"text":"impl Send for yottacandela","synthetic":true,"types":[]},{"text":"impl Send for zettacandela","synthetic":true,"types":[]},{"text":"impl Send for exacandela","synthetic":true,"types":[]},{"text":"impl Send for petacandela","synthetic":true,"types":[]},{"text":"impl Send for teracandela","synthetic":true,"types":[]},{"text":"impl Send for gigacandela","synthetic":true,"types":[]},{"text":"impl Send for megacandela","synthetic":true,"types":[]},{"text":"impl Send for kilocandela","synthetic":true,"types":[]},{"text":"impl Send for hectocandela","synthetic":true,"types":[]},{"text":"impl Send for decacandela","synthetic":true,"types":[]},{"text":"impl Send for candela","synthetic":true,"types":[]},{"text":"impl Send for decicandela","synthetic":true,"types":[]},{"text":"impl Send for centicandela","synthetic":true,"types":[]},{"text":"impl Send for millicandela","synthetic":true,"types":[]},{"text":"impl Send for microcandela","synthetic":true,"types":[]},{"text":"impl Send for nanocandela","synthetic":true,"types":[]},{"text":"impl Send for picocandela","synthetic":true,"types":[]},{"text":"impl Send for femtocandela","synthetic":true,"types":[]},{"text":"impl Send for attocandela","synthetic":true,"types":[]},{"text":"impl Send for zeptocandela","synthetic":true,"types":[]},{"text":"impl Send for yoctocandela","synthetic":true,"types":[]},{"text":"impl Send for yottaweber","synthetic":true,"types":[]},{"text":"impl Send for zettaweber","synthetic":true,"types":[]},{"text":"impl Send for exaweber","synthetic":true,"types":[]},{"text":"impl Send for petaweber","synthetic":true,"types":[]},{"text":"impl Send for teraweber","synthetic":true,"types":[]},{"text":"impl Send for gigaweber","synthetic":true,"types":[]},{"text":"impl Send for megaweber","synthetic":true,"types":[]},{"text":"impl Send for kiloweber","synthetic":true,"types":[]},{"text":"impl Send for hectoweber","synthetic":true,"types":[]},{"text":"impl Send for decaweber","synthetic":true,"types":[]},{"text":"impl Send for weber","synthetic":true,"types":[]},{"text":"impl Send for deciweber","synthetic":true,"types":[]},{"text":"impl Send for centiweber","synthetic":true,"types":[]},{"text":"impl Send for milliweber","synthetic":true,"types":[]},{"text":"impl Send for microweber","synthetic":true,"types":[]},{"text":"impl Send for nanoweber","synthetic":true,"types":[]},{"text":"impl Send for picoweber","synthetic":true,"types":[]},{"text":"impl Send for femtoweber","synthetic":true,"types":[]},{"text":"impl Send for attoweber","synthetic":true,"types":[]},{"text":"impl Send for zeptoweber","synthetic":true,"types":[]},{"text":"impl Send for yoctoweber","synthetic":true,"types":[]},{"text":"impl Send for maxwell","synthetic":true,"types":[]},{"text":"impl Send for yottatesla","synthetic":true,"types":[]},{"text":"impl Send for zettatesla","synthetic":true,"types":[]},{"text":"impl Send for exatesla","synthetic":true,"types":[]},{"text":"impl Send for petatesla","synthetic":true,"types":[]},{"text":"impl Send for teratesla","synthetic":true,"types":[]},{"text":"impl Send for gigatesla","synthetic":true,"types":[]},{"text":"impl Send for megatesla","synthetic":true,"types":[]},{"text":"impl Send for kilotesla","synthetic":true,"types":[]},{"text":"impl Send for hectotesla","synthetic":true,"types":[]},{"text":"impl Send for decatesla","synthetic":true,"types":[]},{"text":"impl Send for tesla","synthetic":true,"types":[]},{"text":"impl Send for decitesla","synthetic":true,"types":[]},{"text":"impl Send for centitesla","synthetic":true,"types":[]},{"text":"impl Send for millitesla","synthetic":true,"types":[]},{"text":"impl Send for microtesla","synthetic":true,"types":[]},{"text":"impl Send for nanotesla","synthetic":true,"types":[]},{"text":"impl Send for picotesla","synthetic":true,"types":[]},{"text":"impl Send for femtotesla","synthetic":true,"types":[]},{"text":"impl Send for attotesla","synthetic":true,"types":[]},{"text":"impl Send for zeptotesla","synthetic":true,"types":[]},{"text":"impl Send for yoctotesla","synthetic":true,"types":[]},{"text":"impl Send for gamma","synthetic":true,"types":[]},{"text":"impl Send for gauss","synthetic":true,"types":[]},{"text":"impl Send for yottagram","synthetic":true,"types":[]},{"text":"impl Send for zettagram","synthetic":true,"types":[]},{"text":"impl Send for exagram","synthetic":true,"types":[]},{"text":"impl Send for petagram","synthetic":true,"types":[]},{"text":"impl Send for teragram","synthetic":true,"types":[]},{"text":"impl Send for gigagram","synthetic":true,"types":[]},{"text":"impl Send for megagram","synthetic":true,"types":[]},{"text":"impl Send for kilogram","synthetic":true,"types":[]},{"text":"impl Send for hectogram","synthetic":true,"types":[]},{"text":"impl Send for decagram","synthetic":true,"types":[]},{"text":"impl Send for gram","synthetic":true,"types":[]},{"text":"impl Send for decigram","synthetic":true,"types":[]},{"text":"impl Send for centigram","synthetic":true,"types":[]},{"text":"impl Send for milligram","synthetic":true,"types":[]},{"text":"impl Send for microgram","synthetic":true,"types":[]},{"text":"impl Send for nanogram","synthetic":true,"types":[]},{"text":"impl Send for picogram","synthetic":true,"types":[]},{"text":"impl Send for femtogram","synthetic":true,"types":[]},{"text":"impl Send for attogram","synthetic":true,"types":[]},{"text":"impl Send for zeptogram","synthetic":true,"types":[]},{"text":"impl Send for yoctogram","synthetic":true,"types":[]},{"text":"impl Send for carat","synthetic":true,"types":[]},{"text":"impl Send for grain","synthetic":true,"types":[]},{"text":"impl Send for hundredweight_long","synthetic":true,"types":[]},{"text":"impl Send for hundredweight_short","synthetic":true,"types":[]},{"text":"impl Send for ounce","synthetic":true,"types":[]},{"text":"impl Send for ounce_troy","synthetic":true,"types":[]},{"text":"impl Send for pennyweight","synthetic":true,"types":[]},{"text":"impl Send for pound","synthetic":true,"types":[]},{"text":"impl Send for pound_troy","synthetic":true,"types":[]},{"text":"impl Send for slug","synthetic":true,"types":[]},{"text":"impl Send for ton_assay","synthetic":true,"types":[]},{"text":"impl Send for ton_long","synthetic":true,"types":[]},{"text":"impl Send for ton_short","synthetic":true,"types":[]},{"text":"impl Send for ton","synthetic":true,"types":[]},{"text":"impl Send for yottagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zettagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for exagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for petagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for teragram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for gigagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for megagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hectogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for gram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for centigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for attogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for gram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for gram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_liter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for gram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for gram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for yottagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zettagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for exagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for petagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for teragram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for gigagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for megagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hectogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decagram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for gram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for centigram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for attogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for carat_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for grain_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hundredweight_long_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hundredweight_short_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for ounce_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for ounce_troy_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for pennyweight_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for pound_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for pound_troy_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for slug_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for ton_assay_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for ton_long_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for ton_short_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for ton_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for grain_per_gallon","synthetic":true,"types":[]},{"text":"impl Send for gram_per_cubic_centimeter","synthetic":true,"types":[]},{"text":"impl Send for ounce_per_cubic_inch","synthetic":true,"types":[]},{"text":"impl Send for ounce_per_gallon_imperial","synthetic":true,"types":[]},{"text":"impl Send for ounce_per_gallon","synthetic":true,"types":[]},{"text":"impl Send for pound_per_cubic_foot","synthetic":true,"types":[]},{"text":"impl Send for pound_per_cubic_inch","synthetic":true,"types":[]},{"text":"impl Send for pound_per_cubic_yard","synthetic":true,"types":[]},{"text":"impl Send for pound_per_gallon_imperial","synthetic":true,"types":[]},{"text":"impl Send for pound_per_gallon","synthetic":true,"types":[]},{"text":"impl Send for slug_per_cubic_foot","synthetic":true,"types":[]},{"text":"impl Send for ton_long_per_cubic_yard","synthetic":true,"types":[]},{"text":"impl Send for ton_short_per_cubic_yard","synthetic":true,"types":[]},{"text":"impl Send for yottagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for zettagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for exagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for petagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for teragram_per_second","synthetic":true,"types":[]},{"text":"impl Send for gigagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for megagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for hectogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for decagram_per_second","synthetic":true,"types":[]},{"text":"impl Send for gram_per_second","synthetic":true,"types":[]},{"text":"impl Send for decigram_per_second","synthetic":true,"types":[]},{"text":"impl Send for centigram_per_second","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_second","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_second","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for attogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_minute","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_hour","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_day","synthetic":true,"types":[]},{"text":"impl Send for gram_per_minute","synthetic":true,"types":[]},{"text":"impl Send for gram_per_hour","synthetic":true,"types":[]},{"text":"impl Send for gram_per_day","synthetic":true,"types":[]},{"text":"impl Send for carat_per_second","synthetic":true,"types":[]},{"text":"impl Send for grain_per_second","synthetic":true,"types":[]},{"text":"impl Send for hundredweight_long_per_second","synthetic":true,"types":[]},{"text":"impl Send for hundredweight_short_per_second","synthetic":true,"types":[]},{"text":"impl Send for ounce_per_second","synthetic":true,"types":[]},{"text":"impl Send for ounce_troy_per_second","synthetic":true,"types":[]},{"text":"impl Send for pennyweight_per_second","synthetic":true,"types":[]},{"text":"impl Send for pound_per_second","synthetic":true,"types":[]},{"text":"impl Send for pound_per_minute","synthetic":true,"types":[]},{"text":"impl Send for pound_per_hour","synthetic":true,"types":[]},{"text":"impl Send for pound_per_day","synthetic":true,"types":[]},{"text":"impl Send for pound_troy_per_second","synthetic":true,"types":[]},{"text":"impl Send for slug_per_second","synthetic":true,"types":[]},{"text":"impl Send for ton_assay_per_second","synthetic":true,"types":[]},{"text":"impl Send for ton_long_per_second","synthetic":true,"types":[]},{"text":"impl Send for ton_short_per_second","synthetic":true,"types":[]},{"text":"impl Send for ton_short_per_hour","synthetic":true,"types":[]},{"text":"impl Send for ton_per_second","synthetic":true,"types":[]},{"text":"impl Send for yottamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zettamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for examole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for petamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for teramole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for gigamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for megamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for hectomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decamole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for mole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for decimole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for centimole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for millimole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for micromole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for nanomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for picomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for femtomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for attomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctomole_per_cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for kilomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for kilomole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for mole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for mole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for millimole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for millimole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for micromole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for micromole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for nanomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for nanomole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for picomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for picomole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for femtomole_per_cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for femtomole_per_liter","synthetic":true,"types":[]},{"text":"impl Send for kilomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for mole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for millimole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for micromole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for nanomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for picomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for femtomole_per_deciliter","synthetic":true,"types":[]},{"text":"impl Send for kilomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for mole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for millimole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for micromole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for nanomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for picomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for femtomole_per_milliliter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_square_meter_per_second_squared_mole","synthetic":true,"types":[]},{"text":"impl Send for yottajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for zettajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for exajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for petajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for terajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for joule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for picojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for femtojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for attojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for zeptojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for yoctojoule_per_mole","synthetic":true,"types":[]},{"text":"impl Send for petawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for terawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for gigawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for megawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for kilowatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for hectowatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for decawatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for watt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for milliwatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for microwatt_hour_per_mole","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_mole","synthetic":true,"types":[]},{"text":"impl Send for btu_per_mole","synthetic":true,"types":[]},{"text":"impl Send for btu_39_per_mole","synthetic":true,"types":[]},{"text":"impl Send for btu_59_per_mole","synthetic":true,"types":[]},{"text":"impl Send for btu_60_per_mole","synthetic":true,"types":[]},{"text":"impl Send for calorie_it_per_mole","synthetic":true,"types":[]},{"text":"impl Send for calorie_per_mole","synthetic":true,"types":[]},{"text":"impl Send for calorie_15_per_mole","synthetic":true,"types":[]},{"text":"impl Send for calorie_20_per_mole","synthetic":true,"types":[]},{"text":"impl Send for calorie_it_nutrition_per_mole","synthetic":true,"types":[]},{"text":"impl Send for calorie_nutrition_per_mole","synthetic":true,"types":[]},{"text":"impl Send for electronvolt_per_mole","synthetic":true,"types":[]},{"text":"impl Send for erg_per_mole","synthetic":true,"types":[]},{"text":"impl Send for foot_poundal_per_mole","synthetic":true,"types":[]},{"text":"impl Send for foot_pound_force_per_mole","synthetic":true,"types":[]},{"text":"impl Send for kilocalorie_it_per_mole","synthetic":true,"types":[]},{"text":"impl Send for kilocalorie_per_mole","synthetic":true,"types":[]},{"text":"impl Send for quad_per_mole","synthetic":true,"types":[]},{"text":"impl Send for therm_ec_per_mole","synthetic":true,"types":[]},{"text":"impl Send for therm_us_per_mole","synthetic":true,"types":[]},{"text":"impl Send for ton_tnt_per_mole","synthetic":true,"types":[]},{"text":"impl Send for watt_second_per_mole","synthetic":true,"types":[]},{"text":"impl Send for yottagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for zettagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for exagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for petagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for teragram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for gigagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for megagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for kilogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for hectogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for decagram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for gram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for decigram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for centigram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for milligram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for microgram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for nanogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for picogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for femtogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for attogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_per_mole","synthetic":true,"types":[]},{"text":"impl Send for yottagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for zettagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for exagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for petagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for teragram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for gigagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for megagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for hectogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for decagram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for gram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for decigram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for centigram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for milligram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for microgram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for nanogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for picogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for femtogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for attogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_yottameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_zettameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_exameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_petameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_terameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_gigameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_megameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_kilometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_hectometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_decameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_decimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_centimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_millimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_micrometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_nanometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_picometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_femtometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_attometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_zeptometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_yoctometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for ton_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilogram_meter_per_minute","synthetic":true,"types":[]},{"text":"impl Send for kilogram_meter_per_hour","synthetic":true,"types":[]},{"text":"impl Send for kilogram_meter_per_day","synthetic":true,"types":[]},{"text":"impl Send for slug_foot_per_second","synthetic":true,"types":[]},{"text":"impl Send for slug_inch_per_second","synthetic":true,"types":[]},{"text":"impl Send for pound_foot_per_second","synthetic":true,"types":[]},{"text":"impl Send for pound_inch_per_second","synthetic":true,"types":[]},{"text":"impl Send for yottawatt","synthetic":true,"types":[]},{"text":"impl Send for zettawatt","synthetic":true,"types":[]},{"text":"impl Send for exawatt","synthetic":true,"types":[]},{"text":"impl Send for petawatt","synthetic":true,"types":[]},{"text":"impl Send for terawatt","synthetic":true,"types":[]},{"text":"impl Send for gigawatt","synthetic":true,"types":[]},{"text":"impl Send for megawatt","synthetic":true,"types":[]},{"text":"impl Send for kilowatt","synthetic":true,"types":[]},{"text":"impl Send for hectowatt","synthetic":true,"types":[]},{"text":"impl Send for decawatt","synthetic":true,"types":[]},{"text":"impl Send for watt","synthetic":true,"types":[]},{"text":"impl Send for deciwatt","synthetic":true,"types":[]},{"text":"impl Send for centiwatt","synthetic":true,"types":[]},{"text":"impl Send for milliwatt","synthetic":true,"types":[]},{"text":"impl Send for microwatt","synthetic":true,"types":[]},{"text":"impl Send for nanowatt","synthetic":true,"types":[]},{"text":"impl Send for picowatt","synthetic":true,"types":[]},{"text":"impl Send for femtowatt","synthetic":true,"types":[]},{"text":"impl Send for attowatt","synthetic":true,"types":[]},{"text":"impl Send for zeptowatt","synthetic":true,"types":[]},{"text":"impl Send for yoctowatt","synthetic":true,"types":[]},{"text":"impl Send for erg_per_second","synthetic":true,"types":[]},{"text":"impl Send for foot_pound_per_hour","synthetic":true,"types":[]},{"text":"impl Send for foot_pound_per_minute","synthetic":true,"types":[]},{"text":"impl Send for foot_pound_per_second","synthetic":true,"types":[]},{"text":"impl Send for horsepower","synthetic":true,"types":[]},{"text":"impl Send for horsepower_boiler","synthetic":true,"types":[]},{"text":"impl Send for horsepower_electric","synthetic":true,"types":[]},{"text":"impl Send for horsepower_metric","synthetic":true,"types":[]},{"text":"impl Send for horsepower_imperial","synthetic":true,"types":[]},{"text":"impl Send for hydraulic_horsepower","synthetic":true,"types":[]},{"text":"impl Send for yottapascal","synthetic":true,"types":[]},{"text":"impl Send for zettapascal","synthetic":true,"types":[]},{"text":"impl Send for exapascal","synthetic":true,"types":[]},{"text":"impl Send for petapascal","synthetic":true,"types":[]},{"text":"impl Send for terapascal","synthetic":true,"types":[]},{"text":"impl Send for gigapascal","synthetic":true,"types":[]},{"text":"impl Send for megapascal","synthetic":true,"types":[]},{"text":"impl Send for kilopascal","synthetic":true,"types":[]},{"text":"impl Send for hectopascal","synthetic":true,"types":[]},{"text":"impl Send for decapascal","synthetic":true,"types":[]},{"text":"impl Send for pascal","synthetic":true,"types":[]},{"text":"impl Send for decipascal","synthetic":true,"types":[]},{"text":"impl Send for centipascal","synthetic":true,"types":[]},{"text":"impl Send for millipascal","synthetic":true,"types":[]},{"text":"impl Send for micropascal","synthetic":true,"types":[]},{"text":"impl Send for nanopascal","synthetic":true,"types":[]},{"text":"impl Send for picopascal","synthetic":true,"types":[]},{"text":"impl Send for femtopascal","synthetic":true,"types":[]},{"text":"impl Send for attopascal","synthetic":true,"types":[]},{"text":"impl Send for zeptopascal","synthetic":true,"types":[]},{"text":"impl Send for yoctopascal","synthetic":true,"types":[]},{"text":"impl Send for atmosphere","synthetic":true,"types":[]},{"text":"impl Send for atmosphere_technical","synthetic":true,"types":[]},{"text":"impl Send for bar","synthetic":true,"types":[]},{"text":"impl Send for centimeter_of_mercury_0","synthetic":true,"types":[]},{"text":"impl Send for centimeter_of_mercury","synthetic":true,"types":[]},{"text":"impl Send for centimeter_of_water_4","synthetic":true,"types":[]},{"text":"impl Send for centimeter_of_water","synthetic":true,"types":[]},{"text":"impl Send for dyne_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for foot_of_mercury","synthetic":true,"types":[]},{"text":"impl Send for foot_of_water_39_2","synthetic":true,"types":[]},{"text":"impl Send for foot_of_water","synthetic":true,"types":[]},{"text":"impl Send for gram_force_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for inch_of_mercury_32","synthetic":true,"types":[]},{"text":"impl Send for inch_of_mercury_60","synthetic":true,"types":[]},{"text":"impl Send for inch_of_mercury","synthetic":true,"types":[]},{"text":"impl Send for inch_of_water_39_2","synthetic":true,"types":[]},{"text":"impl Send for inch_of_water_60","synthetic":true,"types":[]},{"text":"impl Send for inch_of_water","synthetic":true,"types":[]},{"text":"impl Send for kilogram_force_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_force_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_force_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for kip_per_square_inch","synthetic":true,"types":[]},{"text":"impl Send for millibar","synthetic":true,"types":[]},{"text":"impl Send for millimeter_of_mercury","synthetic":true,"types":[]},{"text":"impl Send for millimeter_of_water","synthetic":true,"types":[]},{"text":"impl Send for millitorr","synthetic":true,"types":[]},{"text":"impl Send for poundal_per_square_foot","synthetic":true,"types":[]},{"text":"impl Send for pound_force_per_square_foot","synthetic":true,"types":[]},{"text":"impl Send for pound_force_per_square_inch","synthetic":true,"types":[]},{"text":"impl Send for psi","synthetic":true,"types":[]},{"text":"impl Send for torr","synthetic":true,"types":[]},{"text":"impl Send for ratio","synthetic":true,"types":[]},{"text":"impl Send for part_per_hundred","synthetic":true,"types":[]},{"text":"impl Send for percent","synthetic":true,"types":[]},{"text":"impl Send for part_per_thousand","synthetic":true,"types":[]},{"text":"impl Send for per_mille","synthetic":true,"types":[]},{"text":"impl Send for part_per_ten_thousand","synthetic":true,"types":[]},{"text":"impl Send for basis_point","synthetic":true,"types":[]},{"text":"impl Send for part_per_million","synthetic":true,"types":[]},{"text":"impl Send for part_per_billion","synthetic":true,"types":[]},{"text":"impl Send for part_per_trillion","synthetic":true,"types":[]},{"text":"impl Send for part_per_quadrillion","synthetic":true,"types":[]},{"text":"impl Send for square_kilometer_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for square_meter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for square_centimeter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for square_millimeter_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for square_micrometer_per_second_squared_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yottajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for terajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for joule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctojoule_per_kilogram_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_kilogram_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_gram_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for joule_per_kilogram_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for joule_per_gram_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_kilogram_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_gram_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for btu_per_ounce_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_ounce_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_pound_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_pound_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_per_ton_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for btu_it_per_ton_degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for steradian","synthetic":true,"types":[]},{"text":"impl Send for spat","synthetic":true,"types":[]},{"text":"impl Send for square_degree","synthetic":true,"types":[]},{"text":"impl Send for square_minute","synthetic":true,"types":[]},{"text":"impl Send for square_second","synthetic":true,"types":[]},{"text":"impl Send for yottajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for zettajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for exajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for petajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for terajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for joule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for picojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for femtojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for attojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctojoule_per_square_meter","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for joule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_square_centimeter","synthetic":true,"types":[]},{"text":"impl Send for gigajoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for megajoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for kilojoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for hectojoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for decajoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for joule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for decijoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for centijoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for millijoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for microjoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for nanojoule_per_square_millimeter","synthetic":true,"types":[]},{"text":"impl Send for yottakelvin","synthetic":true,"types":[]},{"text":"impl Send for zettakelvin","synthetic":true,"types":[]},{"text":"impl Send for exakelvin","synthetic":true,"types":[]},{"text":"impl Send for petakelvin","synthetic":true,"types":[]},{"text":"impl Send for terakelvin","synthetic":true,"types":[]},{"text":"impl Send for gigakelvin","synthetic":true,"types":[]},{"text":"impl Send for megakelvin","synthetic":true,"types":[]},{"text":"impl Send for kilokelvin","synthetic":true,"types":[]},{"text":"impl Send for hectokelvin","synthetic":true,"types":[]},{"text":"impl Send for decakelvin","synthetic":true,"types":[]},{"text":"impl Send for kelvin","synthetic":true,"types":[]},{"text":"impl Send for decikelvin","synthetic":true,"types":[]},{"text":"impl Send for centikelvin","synthetic":true,"types":[]},{"text":"impl Send for millikelvin","synthetic":true,"types":[]},{"text":"impl Send for microkelvin","synthetic":true,"types":[]},{"text":"impl Send for nanokelvin","synthetic":true,"types":[]},{"text":"impl Send for picokelvin","synthetic":true,"types":[]},{"text":"impl Send for femtokelvin","synthetic":true,"types":[]},{"text":"impl Send for attokelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptokelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctokelvin","synthetic":true,"types":[]},{"text":"impl Send for degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for degree_rankine","synthetic":true,"types":[]},{"text":"impl Send for yottagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for teragram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decagram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decigram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centigram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for milligram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microgram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctogram_meter_per_second_cubed_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yottawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zettawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for exawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for petawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for terawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for gigawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for megawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for hectowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for decawatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for watt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for deciwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for centiwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for milliwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for microwatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for nanowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for picowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for femtowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for attowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctowatt_per_meter_kelvin","synthetic":true,"types":[]},{"text":"impl Send for kilogram_meter_per_second_cubed_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for kilowatt_per_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for watt_per_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for milliwatt_per_meter_degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for yottakelvin","synthetic":true,"types":[]},{"text":"impl Send for zettakelvin","synthetic":true,"types":[]},{"text":"impl Send for exakelvin","synthetic":true,"types":[]},{"text":"impl Send for petakelvin","synthetic":true,"types":[]},{"text":"impl Send for terakelvin","synthetic":true,"types":[]},{"text":"impl Send for gigakelvin","synthetic":true,"types":[]},{"text":"impl Send for megakelvin","synthetic":true,"types":[]},{"text":"impl Send for kilokelvin","synthetic":true,"types":[]},{"text":"impl Send for hectokelvin","synthetic":true,"types":[]},{"text":"impl Send for decakelvin","synthetic":true,"types":[]},{"text":"impl Send for kelvin","synthetic":true,"types":[]},{"text":"impl Send for decikelvin","synthetic":true,"types":[]},{"text":"impl Send for centikelvin","synthetic":true,"types":[]},{"text":"impl Send for millikelvin","synthetic":true,"types":[]},{"text":"impl Send for microkelvin","synthetic":true,"types":[]},{"text":"impl Send for nanokelvin","synthetic":true,"types":[]},{"text":"impl Send for picokelvin","synthetic":true,"types":[]},{"text":"impl Send for femtokelvin","synthetic":true,"types":[]},{"text":"impl Send for attokelvin","synthetic":true,"types":[]},{"text":"impl Send for zeptokelvin","synthetic":true,"types":[]},{"text":"impl Send for yoctokelvin","synthetic":true,"types":[]},{"text":"impl Send for degree_celsius","synthetic":true,"types":[]},{"text":"impl Send for degree_fahrenheit","synthetic":true,"types":[]},{"text":"impl Send for degree_rankine","synthetic":true,"types":[]},{"text":"impl Send for yottasecond","synthetic":true,"types":[]},{"text":"impl Send for zettasecond","synthetic":true,"types":[]},{"text":"impl Send for exasecond","synthetic":true,"types":[]},{"text":"impl Send for petasecond","synthetic":true,"types":[]},{"text":"impl Send for terasecond","synthetic":true,"types":[]},{"text":"impl Send for gigasecond","synthetic":true,"types":[]},{"text":"impl Send for megasecond","synthetic":true,"types":[]},{"text":"impl Send for kilosecond","synthetic":true,"types":[]},{"text":"impl Send for hectosecond","synthetic":true,"types":[]},{"text":"impl Send for decasecond","synthetic":true,"types":[]},{"text":"impl Send for second","synthetic":true,"types":[]},{"text":"impl Send for decisecond","synthetic":true,"types":[]},{"text":"impl Send for centisecond","synthetic":true,"types":[]},{"text":"impl Send for millisecond","synthetic":true,"types":[]},{"text":"impl Send for microsecond","synthetic":true,"types":[]},{"text":"impl Send for nanosecond","synthetic":true,"types":[]},{"text":"impl Send for picosecond","synthetic":true,"types":[]},{"text":"impl Send for femtosecond","synthetic":true,"types":[]},{"text":"impl Send for attosecond","synthetic":true,"types":[]},{"text":"impl Send for zeptosecond","synthetic":true,"types":[]},{"text":"impl Send for yoctosecond","synthetic":true,"types":[]},{"text":"impl Send for second_sidereal","synthetic":true,"types":[]},{"text":"impl Send for day","synthetic":true,"types":[]},{"text":"impl Send for day_sidereal","synthetic":true,"types":[]},{"text":"impl Send for hour","synthetic":true,"types":[]},{"text":"impl Send for hour_sidereal","synthetic":true,"types":[]},{"text":"impl Send for minute","synthetic":true,"types":[]},{"text":"impl Send for shake","synthetic":true,"types":[]},{"text":"impl Send for year","synthetic":true,"types":[]},{"text":"impl Send for year_sidereal","synthetic":true,"types":[]},{"text":"impl Send for year_tropical","synthetic":true,"types":[]},{"text":"impl Send for yottanewton_meter","synthetic":true,"types":[]},{"text":"impl Send for zettanewton_meter","synthetic":true,"types":[]},{"text":"impl Send for exanewton_meter","synthetic":true,"types":[]},{"text":"impl Send for petanewton_meter","synthetic":true,"types":[]},{"text":"impl Send for teranewton_meter","synthetic":true,"types":[]},{"text":"impl Send for giganewton_meter","synthetic":true,"types":[]},{"text":"impl Send for meganewton_meter","synthetic":true,"types":[]},{"text":"impl Send for kilonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for hectonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for decanewton_meter","synthetic":true,"types":[]},{"text":"impl Send for newton_meter","synthetic":true,"types":[]},{"text":"impl Send for decinewton_meter","synthetic":true,"types":[]},{"text":"impl Send for centinewton_meter","synthetic":true,"types":[]},{"text":"impl Send for millinewton_meter","synthetic":true,"types":[]},{"text":"impl Send for micronewton_meter","synthetic":true,"types":[]},{"text":"impl Send for nanonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for piconewton_meter","synthetic":true,"types":[]},{"text":"impl Send for femtonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for attonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for zeptonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for yoctonewton_meter","synthetic":true,"types":[]},{"text":"impl Send for newton_yottameter","synthetic":true,"types":[]},{"text":"impl Send for newton_zettameter","synthetic":true,"types":[]},{"text":"impl Send for newton_exameter","synthetic":true,"types":[]},{"text":"impl Send for newton_petameter","synthetic":true,"types":[]},{"text":"impl Send for newton_terameter","synthetic":true,"types":[]},{"text":"impl Send for newton_gigameter","synthetic":true,"types":[]},{"text":"impl Send for newton_megameter","synthetic":true,"types":[]},{"text":"impl Send for newton_kilometer","synthetic":true,"types":[]},{"text":"impl Send for newton_hectometer","synthetic":true,"types":[]},{"text":"impl Send for newton_decameter","synthetic":true,"types":[]},{"text":"impl Send for newton_decimeter","synthetic":true,"types":[]},{"text":"impl Send for newton_centimeter","synthetic":true,"types":[]},{"text":"impl Send for newton_millimeter","synthetic":true,"types":[]},{"text":"impl Send for newton_micrometer","synthetic":true,"types":[]},{"text":"impl Send for newton_nanometer","synthetic":true,"types":[]},{"text":"impl Send for newton_picometer","synthetic":true,"types":[]},{"text":"impl Send for newton_femtometer","synthetic":true,"types":[]},{"text":"impl Send for newton_attometer","synthetic":true,"types":[]},{"text":"impl Send for newton_zeptometer","synthetic":true,"types":[]},{"text":"impl Send for newton_yoctometer","synthetic":true,"types":[]},{"text":"impl Send for dyne_meter","synthetic":true,"types":[]},{"text":"impl Send for dyne_centimeter","synthetic":true,"types":[]},{"text":"impl Send for kilogram_force_meter","synthetic":true,"types":[]},{"text":"impl Send for ounce_force_inch","synthetic":true,"types":[]},{"text":"impl Send for pound_force_foot","synthetic":true,"types":[]},{"text":"impl Send for pound_force_inch","synthetic":true,"types":[]},{"text":"impl Send for yottameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for zettameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for exameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for petameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for terameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for gigameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for megameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for hectometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for decameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for decimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for centimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for millimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for micrometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for nanometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for picometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for femtometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for attometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for zeptometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for yoctometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for foot_per_hour","synthetic":true,"types":[]},{"text":"impl Send for foot_per_minute","synthetic":true,"types":[]},{"text":"impl Send for foot_per_second","synthetic":true,"types":[]},{"text":"impl Send for inch_per_second","synthetic":true,"types":[]},{"text":"impl Send for kilometer_per_hour","synthetic":true,"types":[]},{"text":"impl Send for knot","synthetic":true,"types":[]},{"text":"impl Send for mile_per_hour","synthetic":true,"types":[]},{"text":"impl Send for mile_per_minute","synthetic":true,"types":[]},{"text":"impl Send for mile_per_second","synthetic":true,"types":[]},{"text":"impl Send for millimeter_per_minute","synthetic":true,"types":[]},{"text":"impl Send for cubic_yottameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_zettameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_exameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_petameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_terameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_gigameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_megameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_kilometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_hectometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_decameter","synthetic":true,"types":[]},{"text":"impl Send for cubic_meter","synthetic":true,"types":[]},{"text":"impl Send for cubic_decimeter","synthetic":true,"types":[]},{"text":"impl Send for cubic_centimeter","synthetic":true,"types":[]},{"text":"impl Send for cubic_millimeter","synthetic":true,"types":[]},{"text":"impl Send for cubic_micrometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_nanometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_picometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_femtometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_attometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_zeptometer","synthetic":true,"types":[]},{"text":"impl Send for cubic_yoctometer","synthetic":true,"types":[]},{"text":"impl Send for acre_foot","synthetic":true,"types":[]},{"text":"impl Send for barrel","synthetic":true,"types":[]},{"text":"impl Send for bushel","synthetic":true,"types":[]},{"text":"impl Send for cord","synthetic":true,"types":[]},{"text":"impl Send for cubic_foot","synthetic":true,"types":[]},{"text":"impl Send for cubic_inch","synthetic":true,"types":[]},{"text":"impl Send for cubic_mile","synthetic":true,"types":[]},{"text":"impl Send for cubic_yard","synthetic":true,"types":[]},{"text":"impl Send for cup","synthetic":true,"types":[]},{"text":"impl Send for fluid_ounce","synthetic":true,"types":[]},{"text":"impl Send for fluid_ounce_imperial","synthetic":true,"types":[]},{"text":"impl Send for gallon_imperial","synthetic":true,"types":[]},{"text":"impl Send for gallon","synthetic":true,"types":[]},{"text":"impl Send for gill_imperial","synthetic":true,"types":[]},{"text":"impl Send for gill","synthetic":true,"types":[]},{"text":"impl Send for yottaliter","synthetic":true,"types":[]},{"text":"impl Send for zettaliter","synthetic":true,"types":[]},{"text":"impl Send for exaliter","synthetic":true,"types":[]},{"text":"impl Send for petaliter","synthetic":true,"types":[]},{"text":"impl Send for teraliter","synthetic":true,"types":[]},{"text":"impl Send for gigaliter","synthetic":true,"types":[]},{"text":"impl Send for megaliter","synthetic":true,"types":[]},{"text":"impl Send for kiloliter","synthetic":true,"types":[]},{"text":"impl Send for hectoliter","synthetic":true,"types":[]},{"text":"impl Send for decaliter","synthetic":true,"types":[]},{"text":"impl Send for liter","synthetic":true,"types":[]},{"text":"impl Send for deciliter","synthetic":true,"types":[]},{"text":"impl Send for centiliter","synthetic":true,"types":[]},{"text":"impl Send for milliliter","synthetic":true,"types":[]},{"text":"impl Send for microliter","synthetic":true,"types":[]},{"text":"impl Send for nanoliter","synthetic":true,"types":[]},{"text":"impl Send for picoliter","synthetic":true,"types":[]},{"text":"impl Send for femtoliter","synthetic":true,"types":[]},{"text":"impl Send for attoliter","synthetic":true,"types":[]},{"text":"impl Send for zeptoliter","synthetic":true,"types":[]},{"text":"impl Send for yoctoliter","synthetic":true,"types":[]},{"text":"impl Send for peck","synthetic":true,"types":[]},{"text":"impl Send for pint_dry","synthetic":true,"types":[]},{"text":"impl Send for pint_liquid","synthetic":true,"types":[]},{"text":"impl Send for quart_dry","synthetic":true,"types":[]},{"text":"impl Send for quart_liquid","synthetic":true,"types":[]},{"text":"impl Send for stere","synthetic":true,"types":[]},{"text":"impl Send for tablespoon","synthetic":true,"types":[]},{"text":"impl Send for teaspoon","synthetic":true,"types":[]},{"text":"impl Send for register_ton","synthetic":true,"types":[]},{"text":"impl Send for cubic_yottameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_zettameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_exameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_petameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_terameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_gigameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_megameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_kilometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_hectometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_decameter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_meter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_decimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_centimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_millimeter_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_micrometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_nanometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_picometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_femtometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_attometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_zeptometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_yoctometer_per_second","synthetic":true,"types":[]},{"text":"impl Send for yottaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for zettaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for exaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for petaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for teraliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for gigaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for megaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for kiloliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for hectoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for decaliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for liter_per_second","synthetic":true,"types":[]},{"text":"impl Send for deciliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for centiliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for milliliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for microliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for nanoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for picoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for femtoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for attoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for zeptoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for yoctoliter_per_second","synthetic":true,"types":[]},{"text":"impl Send for acre_foot_per_second","synthetic":true,"types":[]},{"text":"impl Send for barrel_per_second","synthetic":true,"types":[]},{"text":"impl Send for bushel_per_second","synthetic":true,"types":[]},{"text":"impl Send for cord_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_foot_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_foot_per_minute","synthetic":true,"types":[]},{"text":"impl Send for cubic_inch_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_inch_per_minute","synthetic":true,"types":[]},{"text":"impl Send for cubic_mile_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_yard_per_second","synthetic":true,"types":[]},{"text":"impl Send for cubic_yard_per_minute","synthetic":true,"types":[]},{"text":"impl Send for cup_per_second","synthetic":true,"types":[]},{"text":"impl Send for fluid_ounce_per_second","synthetic":true,"types":[]},{"text":"impl Send for fluid_ounce_imperial_per_second","synthetic":true,"types":[]},{"text":"impl Send for gallon_imperial_per_second","synthetic":true,"types":[]},{"text":"impl Send for gallon_per_second","synthetic":true,"types":[]},{"text":"impl Send for gallon_per_minute","synthetic":true,"types":[]},{"text":"impl Send for gallon_per_day","synthetic":true,"types":[]},{"text":"impl Send for gill_imperial_per_second","synthetic":true,"types":[]},{"text":"impl Send for gill_per_second","synthetic":true,"types":[]},{"text":"impl Send for peck_per_second","synthetic":true,"types":[]},{"text":"impl Send for pint_dry_per_second","synthetic":true,"types":[]},{"text":"impl Send for pint_liquid_per_second","synthetic":true,"types":[]},{"text":"impl Send for quart_dry_per_second","synthetic":true,"types":[]},{"text":"impl Send for quart_liquid_per_second","synthetic":true,"types":[]},{"text":"impl Send for stere_per_second","synthetic":true,"types":[]},{"text":"impl Send for tablespoon_per_second","synthetic":true,"types":[]},{"text":"impl Send for teaspoon_per_second","synthetic":true,"types":[]},{"text":"impl Send for register_ton_per_second","synthetic":true,"types":[]},{"text":"impl&lt;D:&nbsp;?Sized, N&gt; Send for Arguments&lt;D, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D:&nbsp;?Sized, U:&nbsp;?Sized, V, N&gt; Send for QuantityArguments&lt;D, U, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;D:&nbsp;?Sized, U:&nbsp;?Sized, V&gt; Send for Quantity&lt;D, U, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for DisplayStyle","synthetic":true,"types":[]},{"text":"impl Send for ParseQuantityError","synthetic":true,"types":[]},{"text":"impl Send for ConstantOp","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Send for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Origin","synthetic":true,"types":[]},{"text":"impl Send for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl Send for ParseError","synthetic":true,"types":[]},{"text":"impl Send for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Position","synthetic":true,"types":[]},{"text":"impl Send for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["vec_arena"] = [{"text":"impl&lt;T&gt; Send for Arena&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for IterMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["vec_map"] = [{"text":"impl&lt;V&gt; Send for VecMap&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Entry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for VacantEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for OccupiedEntry&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Iter&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for IterMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Keys&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Values&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for ValuesMut&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;V&gt; Send for IntoIter&lt;V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, V&gt; Send for Drain&lt;'a, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["walkdir"] = [{"text":"impl Send for DirEntry","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for WalkDir","synthetic":true,"types":[]},{"text":"impl Send for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;I, P&gt; Send for FilterEntry&lt;I, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["want"] = [{"text":"impl Send for Giver","synthetic":true,"types":[]},{"text":"impl Send for Taker","synthetic":true,"types":[]},{"text":"impl Send for SharedGiver","synthetic":true,"types":[]},{"text":"impl Send for Closed","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl Send for DNSName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl Send for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Send for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["wyz"] = [{"text":"impl&lt;T&gt; Send for FmtBinary&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtDisplay&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtLowerExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtLowerHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtOctal&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtPointer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtUpperExp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for FmtUpperHex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["xattr"] = [{"text":"impl Send for UnsupportedPlatformError","synthetic":true,"types":[]},{"text":"impl Send for XAttrs","synthetic":true,"types":[]}];
implementors["xml"] = [{"text":"impl&lt;'a&gt; Send for Name&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Send for ReprDisplay&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedName","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Attribute&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for OwnedAttribute","synthetic":true,"types":[]},{"text":"impl Send for TextPosition","synthetic":true,"types":[]},{"text":"impl Send for XmlVersion","synthetic":true,"types":[]},{"text":"impl Send for Namespace","synthetic":true,"types":[]},{"text":"impl Send for NamespaceStack","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for NamespaceStackMappings&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CheckedTarget&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for ParserConfig","synthetic":true,"types":[]},{"text":"impl Send for XmlEvent","synthetic":true,"types":[]},{"text":"impl Send for ErrorKind","synthetic":true,"types":[]},{"text":"impl Send for Error","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for EventReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for Events&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for EmitterError","synthetic":true,"types":[]},{"text":"impl Send for EmitterConfig","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for XmlEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EndElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for StartElementBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for EventWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["yaml_rust"] = [{"text":"impl Send for EmitError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for YamlEmitter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Event","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Parser&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for TEncoding","synthetic":true,"types":[]},{"text":"impl Send for TScalarStyle","synthetic":true,"types":[]},{"text":"impl Send for Marker","synthetic":true,"types":[]},{"text":"impl Send for ScanError","synthetic":true,"types":[]},{"text":"impl Send for TokenType","synthetic":true,"types":[]},{"text":"impl Send for Token","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Scanner&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for Yaml","synthetic":true,"types":[]},{"text":"impl Send for YamlLoader","synthetic":true,"types":[]},{"text":"impl Send for YamlIter","synthetic":true,"types":[]}];
implementors["zip"] = [{"text":"impl Send for CompressionMethod","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Send for ZipArchive&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Send for ZipFile&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for InvalidPassword","synthetic":true,"types":[]},{"text":"impl Send for ZipError","synthetic":true,"types":[]},{"text":"impl Send for DateTime","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Send for ZipWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for FileOptions","synthetic":true,"types":[]}];
implementors["zstd"] = [{"text":"impl Send for Compressor","synthetic":true,"types":[]},{"text":"impl Send for Decompressor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for EncoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DecoderDictionary&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for Decoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Send for Encoder&lt;'a, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for Encoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Send for Decoder&lt;'a, W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; !Send for AutoFinishEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R, D&gt; Send for Reader&lt;R, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W, D&gt; Send for Writer&lt;W, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for NoOp","synthetic":true,"types":[]},{"text":"impl Send for Status","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Decoder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Encoder&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["zstd_safe"] = [{"text":"impl&lt;'a&gt; Send for InBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for OutBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FrameFormat","synthetic":true,"types":[]},{"text":"impl Send for CParameter","synthetic":true,"types":[]},{"text":"impl Send for DParameter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for CCtx&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Send for DCtx&lt;'_&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for CDict&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Send for DDict&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["zstd_sys"] = [{"text":"impl Send for ZSTD_CCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_DCtx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_strategy","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_cParameter","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_bounds","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_ResetDirective","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dParameter","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_inBuffer_s","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_outBuffer_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_EndDirective","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_CDict_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_DDict_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_CCtx_params_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_Sequence","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_compressionParameters","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameParameters","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_parameters","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dictContentType_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dictLoadMethod_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_format_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_forceIgnoreChecksum_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_refMultipleDDicts_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_dictAttachPref_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_literalCompressionMode_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_sequenceFormat_e","synthetic":true,"types":[]},{"text":"impl !Send for ZSTD_customMem","synthetic":true,"types":[]},{"text":"impl Send for POOL_ctx_s","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameProgression","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameType_e","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_frameHeader","synthetic":true,"types":[]},{"text":"impl Send for ZSTD_nextInputType_e","synthetic":true,"types":[]},{"text":"impl Send for ZDICT_params_t","synthetic":true,"types":[]},{"text":"impl Send for ZDICT_cover_params_t","synthetic":true,"types":[]},{"text":"impl Send for ZDICT_fastCover_params_t","synthetic":true,"types":[]},{"text":"impl Send for ZDICT_legacy_params_t","synthetic":true,"types":[]},{"text":"impl !Send for __locale_struct","synthetic":true,"types":[]},{"text":"impl Send for ZSTDMT_CCtx_s","synthetic":true,"types":[]},{"text":"impl Send for __locale_data","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()