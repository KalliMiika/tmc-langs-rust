(function() {var implementors = {};
implementors["chrono"] = [{"text":"impl Serialize for NaiveDate","synthetic":false,"types":[]},{"text":"impl Serialize for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl Serialize for NaiveTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;TimeZone&gt; Serialize for DateTime&lt;Tz&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Weekday","synthetic":false,"types":[]},{"text":"impl Serialize for Month","synthetic":false,"types":[]}];
implementors["j4rs"] = [{"text":"impl Serialize for InvocationArg","synthetic":false,"types":[]},{"text":"impl Serialize for Instance","synthetic":false,"types":[]}];
implementors["oauth2"] = [{"text":"impl Serialize for BasicTokenType","synthetic":false,"types":[]},{"text":"impl Serialize for BasicErrorResponseType","synthetic":false,"types":[]},{"text":"impl Serialize for EmptyExtraDeviceAuthorizationFields","synthetic":false,"types":[]},{"text":"impl&lt;EF&gt; Serialize for DeviceAuthorizationResponse&lt;EF&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: ExtraDeviceAuthorizationFields,<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: ExtraDeviceAuthorizationFields,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for DeviceCodeErrorResponseType","synthetic":false,"types":[]},{"text":"impl Serialize for StandardRevocableToken","synthetic":false,"types":[]},{"text":"impl Serialize for RevocationErrorResponseType","synthetic":false,"types":[]},{"text":"impl Serialize for ClientId","synthetic":false,"types":[]},{"text":"impl Serialize for AuthUrl","synthetic":false,"types":[]},{"text":"impl Serialize for TokenUrl","synthetic":false,"types":[]},{"text":"impl Serialize for RedirectUrl","synthetic":false,"types":[]},{"text":"impl Serialize for IntrospectionUrl","synthetic":false,"types":[]},{"text":"impl Serialize for RevocationUrl","synthetic":false,"types":[]},{"text":"impl Serialize for DeviceAuthorizationUrl","synthetic":false,"types":[]},{"text":"impl Serialize for EndUserVerificationUrl","synthetic":false,"types":[]},{"text":"impl Serialize for ResponseType","synthetic":false,"types":[]},{"text":"impl Serialize for ResourceOwnerUsername","synthetic":false,"types":[]},{"text":"impl Serialize for Scope","synthetic":false,"types":[]},{"text":"impl Serialize for PkceCodeChallengeMethod","synthetic":false,"types":[]},{"text":"impl Serialize for PkceCodeVerifier","synthetic":false,"types":[]},{"text":"impl Serialize for PkceCodeChallenge","synthetic":false,"types":[]},{"text":"impl Serialize for ClientSecret","synthetic":false,"types":[]},{"text":"impl Serialize for CsrfToken","synthetic":false,"types":[]},{"text":"impl Serialize for AuthorizationCode","synthetic":false,"types":[]},{"text":"impl Serialize for RefreshToken","synthetic":false,"types":[]},{"text":"impl Serialize for AccessToken","synthetic":false,"types":[]},{"text":"impl Serialize for DeviceCode","synthetic":false,"types":[]},{"text":"impl Serialize for UserCode","synthetic":false,"types":[]},{"text":"impl Serialize for EmptyExtraTokenFields","synthetic":false,"types":[]},{"text":"impl&lt;EF, TT&gt; Serialize for StandardTokenResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: ExtraTokenFields,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: TokenType,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: TokenType,<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: ExtraTokenFields,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;EF, TT&gt; Serialize for StandardTokenIntrospectionResponse&lt;EF, TT&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: ExtraTokenFields,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: TokenType + 'static,<br>&nbsp;&nbsp;&nbsp;&nbsp;TT: TokenType,<br>&nbsp;&nbsp;&nbsp;&nbsp;EF: ExtraTokenFields,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;ErrorResponseType&gt; Serialize for StandardErrorResponse&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: ErrorResponseType,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["schemars"] = [{"text":"impl Serialize for Schema","synthetic":false,"types":[]},{"text":"impl Serialize for RootSchema","synthetic":false,"types":[]},{"text":"impl Serialize for SchemaObject","synthetic":false,"types":[]},{"text":"impl Serialize for Metadata","synthetic":false,"types":[]},{"text":"impl Serialize for SubschemaValidation","synthetic":false,"types":[]},{"text":"impl Serialize for NumberValidation","synthetic":false,"types":[]},{"text":"impl Serialize for StringValidation","synthetic":false,"types":[]},{"text":"impl Serialize for ArrayValidation","synthetic":false,"types":[]},{"text":"impl Serialize for ObjectValidation","synthetic":false,"types":[]},{"text":"impl Serialize for InstanceType","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Serialize for SingleOrVec&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Serialize for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]},{"text":"impl Serialize for Number","synthetic":false,"types":[]}];
implementors["serde_yaml"] = [{"text":"impl Serialize for Mapping","synthetic":false,"types":[]},{"text":"impl Serialize for Number","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]}];
implementors["tmc_client"] = [{"text":"impl Serialize for Organization","synthetic":false,"types":[]},{"text":"impl Serialize for Course","synthetic":false,"types":[]},{"text":"impl Serialize for CourseData","synthetic":false,"types":[]},{"text":"impl Serialize for CourseDetails","synthetic":false,"types":[]},{"text":"impl Serialize for Exercise","synthetic":false,"types":[]},{"text":"impl Serialize for CourseExercise","synthetic":false,"types":[]},{"text":"impl Serialize for ExerciseDetails","synthetic":false,"types":[]},{"text":"impl Serialize for ExercisesDetails","synthetic":false,"types":[]},{"text":"impl Serialize for Submission","synthetic":false,"types":[]},{"text":"impl Serialize for NewSubmission","synthetic":false,"types":[]},{"text":"impl Serialize for SubmissionProcessingStatus","synthetic":false,"types":[]},{"text":"impl Serialize for SubmissionFinished","synthetic":false,"types":[]},{"text":"impl Serialize for SubmissionStatus","synthetic":false,"types":[]},{"text":"impl Serialize for SubmissionFeedbackResponse","synthetic":false,"types":[]},{"text":"impl Serialize for Review","synthetic":false,"types":[]},{"text":"impl Serialize for UpdateResult","synthetic":false,"types":[]},{"text":"impl Serialize for ClientUpdateData","synthetic":false,"types":[]}];
implementors["tmc_langs_framework"] = [{"text":"impl Serialize for TestDesc","synthetic":false,"types":[]},{"text":"impl Serialize for TestResult","synthetic":false,"types":[]},{"text":"impl Serialize for ExerciseDesc","synthetic":false,"types":[]},{"text":"impl Serialize for RunResult","synthetic":false,"types":[]},{"text":"impl Serialize for RunStatus","synthetic":false,"types":[]},{"text":"impl Serialize for ExercisePackagingConfiguration","synthetic":false,"types":[]},{"text":"impl Serialize for StyleValidationStrategy","synthetic":false,"types":[]},{"text":"impl Serialize for StyleValidationError","synthetic":false,"types":[]},{"text":"impl Serialize for StyleValidationResult","synthetic":false,"types":[]},{"text":"impl Serialize for Warning","synthetic":false,"types":[]}];
implementors["tmc_langs_util"] = [{"text":"impl&lt;T&gt; Serialize for StatusUpdate&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for RefreshData","synthetic":false,"types":[]},{"text":"impl Serialize for RefreshExercise","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Serialize for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Serialize for Value","synthetic":false,"types":[]},{"text":"impl Serialize for Datetime","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Serialize&gt; Serialize for Spanned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S&gt; Serialize for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Serialize,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Serialize for Url","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()